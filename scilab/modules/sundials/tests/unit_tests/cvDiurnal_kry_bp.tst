// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
//
// Copyright (C) 2022 - St√©phane Mottelet
//
// This file must be used under the terms of GPL License
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// https://www.gnu.org/licenses/gpl-3.0.txt

// <-- CLI SHELL MODE -->
// <-- NO CHECK REF -->

//Example problem:
//
//An ODE system is generated from the following 2-species diurnal
//kinetics advection-diffusion PDE system in 2 space dimensions:
//
//dc(i)/dt = Kh*(d/dx)^2 c(i) + V*dc(i)/dx + (d/dy)(Kv(y)*dc(i)/dy)
//                + Ri(c1,c2,t)      for i = 1,2,   where
//  R1(c1,c2,t) = -q1*c1*c3 - q2*c1*c2 + 2*q3(t)*c3 + q4(t)*c2 ,
//  R2(c1,c2,t) =  q1*c1*c3 - q2*c1*c2 - q4(t)*c2 ,
//  Kv(y) = Kv0*exp(y/5) ,
//Kh, V, Kv0, q1, q2, and c3 are constants, and q3(t) and q4(t)
//vary diurnally. The problem is posed on the square
//  0 <= x <= 20,    30 <= y <= 50   (all in km),
//with homogeneous Neumann boundary conditions, and for time t in
//  0 <= t <= 86400 sec (1 day).
//The PDE system is treated by central differences on a uniform
//10 x 10 mesh, with simple polynomial initial profiles.
//The problem is solved with CVODE, with the BDF/GMRES
//method (i.e. using the SUNLinSol_SPGMR linear solver) and a banded
//preconditioner, generated by difference quotients, using the
//module CVBANDPRE. The problem is solved with left and right
//preconditioning.
//-----------------------------------------------------------------*/

function out=SQR(x)
    out = x.*x;
end

source = fullfile(SCI,"modules","sundials","tests","unit_tests","cvDiurnal_kry_bp.c")
SUN_Clink(["f","main"],source,load=%t);

PI = 3.1415926535898;
TWOHR = 7200.0      // number of seconds in two hours
HALFDAY = 4.32e4    // number of seconds in a half day
KH = 4.0e-6         // horizontal diffusivity Kh
VEL = 0.001         // advection velocity V
KV0 = 1.0e-8        // coefficient in Kv(y)

RTOL = 1e-5;
ATOL = 100*RTOL;

MX = 100; // MX and MY values are hard coded in cvDiurnal_kry_bp.c
MY = 100;
XMIN = 0; XMAX = 20;
YMIN = 30; YMAX = 50;
DX = (XMAX-XMIN)/(MX-1);
DY = (YMAX-YMIN)/(MY-1);
x = XMIN+(0:MX-1)*DX;
y = YMIN+(0:MY-1)*DY;
[X,Y] = ndgrid(x,y);
q4 = 0;
om = PI/HALFDAY;
hdco = KH/SQR(DX);
haco = VEL/(2*DX);
vdco = (1/SQR(DY))*KV0;

C0 = zeros(2,MX,MY);

// rhs has prototype
// int f(realtype t, N_Vector u, N_Vector udot, void *user_data)
// with user_data of type UserData
// typedef struct {
//   realtype q4, om, dx, dy, hdco, haco, vdco;
// } *UserData;
//
// we pass it from scilab with vector [q4,om,dx,dy,hdco,vdco]

user_data = [q4,om,DX,DY,hdco,haco,vdco];

// initial profiles

alph = SQR(0.1*X-1);
alph = 1-alph+0.5*SQR(alph);
bet = SQR(0.1*Y-4);
bet = 1-bet+0.5*SQR(bet);
C0(1,:,:) = 1e6*alph.*bet;
C0(2,:,:) = 1e12*alph.*bet;
tspan = TWOHR:TWOHR:86400;

[t,C,info] = cvode(list("f",user_data),tspan,C0,t0=0,rtol=RTOL,atol=ATOL,method="BDF",linearSolver="GMR",precBand=[2 2]);










