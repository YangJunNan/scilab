// =============================================================================
// Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
//
// Copyright (C) 2022 - St√©phane Mottelet
//
// This file must be used under the terms of GPL License
// This source file is licensed as described in the file COPYING, which
// you should have received as part of this distribution.  The terms
// are also available at
// https://www.gnu.org/licenses/gpl-3.0.txt

// <-- CLI SHELL MODE -->
// <-- NO CHECK REF -->

// from SUNDIALS examples/arkode/C_serial/ark_brusselator.c

function dydt = brussE(t,y,a,b,ep)
    u=y(1); v=y(2); w=y(3);
    dydt = [a-(w+1)*u+v*u*u; w*u-v*u*u;-w*u];
end

function dydt = brussI(t,y,b,ep)
    u=y(1); v=y(2); w=y(3);
    dydt = [0; 0; (b-w)/ep];
end

function dydt = bruss(t,y,a,b,ep)
    dydt =  brussE(t,y,a,b,ep)+brussI(t,y,b,ep);
end

function j = brussJac(t,y,a,b,ep)
    u=y(1); v=y(2); w=y(3);
    j = [-(w+1.0)+2.0*u*v, u*u, -u
           w - 2.0*u*v, -u*u, u
           -w, 0.0, -1.0/ep - u];
end

function j = brussJacI(t,y,ep)
    j = zeros(3,3);
    j(3,3) = -1.0/ep;
end

tspan = 0:10;

u0 = 3.9; v0 = 1.1; w0 = 2.8; a  = 1.2; b  = 2.5; ep = 1.0e-5;
[t,y1] = arkode(list(bruss,a,b,ep), tspan, [u0;v0;w0], jacobian=list(brussJac,a,b,ep), method="SDIRK_5_3_4", rtol=1e-6, atol=1e-10, interpolation="Lagrange");
assert_checkalmostequal(y1',[
3.9                       1.100000000000000088818   2.799999999999999822364
  2.075274476384406874274   1.059602097488927530122   2.499948118839713462336
  1.1004601552099626538     1.72361037821078943999    2.499972488657661529032
  0.789620201718924330514   2.326668145947339727542   2.499980259622940792497
  0.811773025832897343612   2.72558352291164984749    2.499979705878180080703
  1.186990860070946229854   2.595551366822925309918   2.499970325757104205877
  1.887326368258316122706   1.494081223961609472539   2.499952817708902319538
  1.32327141206405429763    1.619016397245004679206   2.499966918504401558465
  0.921787479218662997305   2.130219555496242200832   2.49997695547227039015 
  0.849543192940405367253   2.539474334773098362916   2.499978761616678646362
  1.064969720291530475009   2.595955943419105516057   2.499973376149342119135]);

u0 = 3.0; v0 = 3.0; w0 = 3.5; a  = 0.5; b  = 3.0; ep = 5.0e-4;
[t,y2] = arkode(list(bruss,a,b,ep), tspan, [u0;v0;w0], jacobian=list(brussJac,a,b,ep), method="SDIRK_5_3_4", rtol=1e-6, atol=1e-10, interpolation="Lagrange");
assert_checkalmostequal(y2',[
3.                        3.                        3.5                    
   1.897254967600916053527   1.274938900856469770062   2.997154948529027862492
   0.346124830609865485886   2.366448544677915766243   2.999480451623432131214
   0.147442192627575741071   2.8620605375584218244     2.999778832375646242525
   0.140733170358505299546   3.226730994568107302456   2.999788915838168978922
   0.142658882015369831153   3.58320566358356229486    2.999786028681925564854
   0.145095105906545951413   3.936909801040532119742   2.999782375179805171683
   0.147720125885158815038   4.287892674777611823345   2.999778438246821110624
   0.150542246728055412186   4.635956904792246646707   2.999774205891692968606
   0.15359035544896568193    4.980862780704883086003   2.999769634549867003415
   0.156901284805647550646   5.322329760720418967423   2.999764669144450834892]);

u0 = 1.2; v0 = 3.1; w0 = 3.0; a  = 1.0; b  = 3.5; ep = 5e-6;
[t y3]=arkode(list(bruss,a,b,ep), tspan, [u0;v0;w0], jacobian=list(brussJac,a,b,ep), method="SDIRK_5_3_4", rtol=1e-6, atol=1e-10, interpolation="Lagrange");
assert_checkalmostequal(y3',[
1.199999999999999955591   3.100000000000000088818   3.                     
   1.103855040650340235686   3.013155951261291765064   3.499980682618201832668
   0.687994477635569645635   3.5213810973662527104     3.4999879601023913267  
   0.409466196468536269837   4.277885311577259486171   3.499992834344407999225
   0.367887167358998345978   4.94200448467635578       3.49999356198744893121 
   0.413859114369357294905   5.510616928664535230098   3.49999275748830251942 
   0.589236163812204782886   5.855674533673417059276   3.49998968843046887045 
   4.756553219136954169244   0.73540828837647809202    3.499916761969308343083
   1.813439051942693946984   1.575778584803350534926   3.499968264929618211312
   0.527895612437428329855   2.80737009800769676815    3.499990761800441774199
   0.30559930535428841969    3.657380843459687280728   3.499994652017961005441]);
//

// from SUNDIALS examples/arkode/C_serial/ark_brusselator_fp.c

source = fullfile(SCI,"modules","sundials","tests","unit_tests","ark_brusselator_fp.c")
SUN_Clink(["sunBrussI","sunBrussE"],source,load=%t);

u0 = 3.0;
v0 = 3.0;
w0 = 3.5;
a  = 0.5;
b  = 3.0;
ep = 5.0e-4;

[t,y4,info] = arkode(list(brussE,a,b,ep), 0:10, [u0;v0;w0], rtol=1e-6, atol=1e-10, ...
stiffRhs=list(brussI,b,ep),...
nonLinSol="fixedPoint", ...
nonLinSolAccel=3, ...
nonLinSolMaxIters=10);

[t,y4c,infoc] = arkode(list("sunBrussE",[a,b,ep]), 0:10, [u0;v0;w0], rtol=1e-6, atol=1e-10, ...
stiffRhs=list("sunBrussI",[a,b,ep]),...
nonLinSol="fixedPoint", ...
nonLinSolAccel=3, ...
nonLinSolMaxIters=10);

assert_checkalmostequal(y4',[
3.                        3.                        3.5                    
   1.897254827042214042621   1.274938995253422246989   2.997155202980095189957
   0.346125345900461789395   2.366447656032560686867   2.999480825472720990632
   0.147442072574106186611   2.862060558345688843218   2.999780907151034181624
   0.140733007139262344953   3.226731047068421176505   2.999788085634520928835
   0.142658864744576535655   3.583205615534626353735   2.999788290583051075799
   0.145095062726312784562   3.93690977009184495117    2.999782438784606153348
   0.147720081632329608423   4.287892650473984268444   2.999780008670541953109
   0.150542210867346704095   4.63595688139841044517    2.999774762830070162778
   0.153590298379668838136   4.980862779234050741195   2.999767872943427171606
   0.156901260504208245328   5.322329721727096618622   2.999764607219456369336]);

assert_checkequal(y4,y4c);