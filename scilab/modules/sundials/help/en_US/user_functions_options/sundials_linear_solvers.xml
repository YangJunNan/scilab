<?xml version="1.0" encoding="UTF-8"?>
<!--
* Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
* Copyright (C) 2022 - StÃ©phane MOTTELET
*
* This file is hereby licensed under the terms of the GNU GPL v3.0,
* For more information, see the COPYING file which you should have received
* along with this program.
*
-->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svg="http://www.w3.org/2000/svg" xmlns:ns5="http://www.w3.org/1999/xhtml" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org" xml:id="sundials_linear_solvers" xml:lang="en" xmlns:m="http://www.w3.org/1998/Math/MathML">
    <refnamediv>
        <refname>Sundials Linear Solvers</refname>
        <refpurpose>Sundials direct and iterative, preconditionned linear solvers</refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
                ... = solver( ... , linearSolver = linSol, precType = side, precBand = [mu,ml])
        </synopsis>
    </refsynopsisdiv>
    <refsection role="description">
        <title>Linear solvers used by Sundials solvers</title>
        <para>Sundials solvers may use underlying linear solvers when the selected method needs to solve a linear algebraic system during a 
            method step. This is the case when KINSOL is used with the Newton or Picard method or when ODE/DAE solvers use an 
            implicit scheme (ARKODE uses such a solver with explicit schemes also when a mass matrix is present).
            When the Jacobian is explicitely provided by the user, either dense, banded or sparse, or implicitely by means of jacBand
            or jacPattern options, then the corresponding direct solver is used, i.e. Lapack's dense or band solver or KLU sparse solver.
            The default behavior when a linear solver is needed is to use the dense solver and difference quotients to approximate the Jacobian.
        </para>
        <para>
            When very large scale problems are considered, matrix-free, scaled, preconditioned, iterative linear solvers are sometimes the
            only way to go. Although Sundials allows to use this class of solver for ODEs, DAEs and NAEs, for the time being the
            Scilab module only allows
            them for ODEs (CVODE and ARKODE solvers) and built-in band preconditioning. The related options are the following:
        </para>

        <para>
            <informaltable border='1'>
                <tbody>
                    <tr>
                        <td>linearSolver</td>
                        <td>    
                            <para>The linear solver given as a string:
                                <itemizedlist>
                                    <listitem>"CG" : Conjugate Gradient (system matrix must be symmetric)</listitem>
                                    <listitem>"BCGS" : Stabilized Bi-Conjugate Gradient</listitem>
                                    <listitem>"FGMR" : Flexible Generalized Minimum Residual</listitem>
                                    <listitem>"GMR" : Generalized Minimum Residual</listitem>
                                    <listitem>"TFQMR" : Transpose-Free Qusi-Minimum Residual</listitem>
                                </itemizedlist>
                            </para>
                        </td>
                    </tr>
                    <tr>
                        <td>linSolMaxIters</td>
                        <td>    
                            <para>The maximum number of iterations/Krylov vectors</para>
                        </td>
                    </tr>
                    <tr>
                        <td>precType</td>
                        <td>The preconditioning type or side: "RIGHT" (the default), "LEFT", "BOTH" or "NONE".
                        </td>
                    </tr>
                    <tr>
                        <td>precBand</td>
                        <td>
                            <para>A vector of two positive integers <literal>[mu,ml]</literal> giving respectively
                            the upper and lower half bandwidth of the preconditionner.</para>
                        </td>
                    </tr>
                </tbody>
            </informaltable>
        </para>
    </refsection>

    <refsection role="example">
        <title>Example</title>
        <para>
            <programlisting><![CDATA[
                // Example problem:
                //
                // An ODE system is generated from the following 2-species diurnal
                // kinetics advection-diffusion PDE system in 2 space dimensions:
                //
                // dc(i)/dt = Kh*(d/dx)^2 c(i) + V*dc(i)/dx + (d/dy)(Kv(y)*dc(i)/dy)
                //                + Ri(c1,c2,t)      for i = 1,2,   where
                //  R1(c1,c2,t) = -q1*c1*c3 - q2*c1*c2 + 2*q3(t)*c3 + q4(t)*c2 ,
                //  R2(c1,c2,t) =  q1*c1*c3 - q2*c1*c2 - q4(t)*c2 ,
                //  Kv(y) = Kv0*exp(y/5), Kh, V, Kv0, q1, q2, and c3 are constants, and q3(t) and q4(t)
                // vary diurnally. The problem is posed on the square
                // 0 <= x <= 20,    30 <= y <= 50   (all in km),
                // with homogeneous Neumann boundary conditions, and for time t in
                // 0 <= t <= 86400 sec (1 day).
                // The PDE system is treated by central differences on a uniform
                // 10 x 10 mesh, with simple polynomial initial profiles.
                // The problem is solved with CVODE, with the BDF/GMRES
                // method (i.e. using the SUNLinSol_SPGMR linear solver) and a banded
                // preconditioner, generated by difference quotients, using the
                // module CVBANDPRE. The problem is solved with left and right
                // preconditioning.
                //-----------------------------------------------------------------*/

                function out=SQR(x)
                    out = x.*x;
                end
                source = fullfile(SCI,"modules","sundials","tests","unit_tests","cvDiurnal_kry_bp.c")
                SUN_Clink(["f","main"],source,load=%t);

                PI = 3.1415926535898;
                TWOHR = 7200.0      // number of seconds in two hours
                HALFDAY = 4.32e4    // number of seconds in a half day
                KH = 4.0e-6         // horizontal diffusivity Kh
                VEL = 0.001         // advection velocity V
                KV0 = 1.0e-8        // coefficient in Kv(y)

                RTOL = 1e-5;
                ATOL = 100*RTOL;

                MX = 100; // MX and MY values are hard coded in cvDiurnal_kry_bp.c
                MY = 100;
                XMIN = 0; XMAX = 20;
                YMIN = 30; YMAX = 50;
                DX = (XMAX-XMIN)/(MX-1);
                DY = (YMAX-YMIN)/(MY-1);
                x = XMIN+(0:MX-1)*DX;
                y = YMIN+(0:MY-1)*DY;
                [X,Y] = ndgrid(x,y);
                q4 = 0;
                om = PI/HALFDAY;
                hdco = KH/SQR(DX);
                haco = VEL/(2*DX);
                vdco = (1/SQR(DY))*KV0;

                C0 = zeros(2,MX,MY);

                // rhs has prototype
                // int f(realtype t, N_Vector u, N_Vector udot, void *user_data)
                // with user_data of type UserData
                // typedef struct {
                //   realtype q4, om, dx, dy, hdco, haco, vdco;
                // } *UserData;
                //
                // we pass it from scilab with vector [q4,om,dx,dy,hdco,vdco]

                user_data = [q4,om,DX,DY,hdco,haco,vdco];

                // initial profiles

                alph = SQR(0.1*X-1);
                alph = 1-alph+0.5*SQR(alph);
                bet = SQR(0.1*Y-4);
                bet = 1-bet+0.5*SQR(bet);
                C0(1,:,:) = 1e6*alph.*bet;
                C0(2,:,:) = 1e12*alph.*bet;
                tspan = TWOHR:TWOHR:86400;

                [t,C,info] = cvode(list("f",user_data),tspan,C0,t0=0,rtol=RTOL,atol=ATOL,method="BDF",linearSolver="GMR",precBand=[2 2]);
                ]]>
            </programlisting>
        </para>
    </refsection>

    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="arkode">ARKODE solver</link>
            </member>
            <member>
                <link linkend="cvode">CVODE solver</link>
            </member>
            <member>
                <link linkend="ida">IDA solver</link>
            </member>
            <member>
                <link linkend="ida">KINSOL solver</link>
            </member>
        </simplelist>
    </refsection>
</refentry>
