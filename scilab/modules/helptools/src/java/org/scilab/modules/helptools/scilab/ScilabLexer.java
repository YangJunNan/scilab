// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: E:/ws/scilab/bruno/scilab/modules/helptools/src/java/jflex/scilab.jflex

//CHECKSTYLE:OFF

package org.scilab.modules.helptools.scilab;

import java.util.Arrays;
import java.util.Set;
import java.util.Map;
import java.util.HashSet;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.Reader;
import java.io.StringReader;
import java.io.IOException;

@javax.annotation.Generated("JFlex")

@SuppressWarnings("fallthrough")
public final class ScilabLexer {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int QSTRING = 2;
  public static final int COMMENT = 4;
  public static final int FIELD = 6;
  public static final int COMMANDS = 8;
  public static final int COMMANDSWHITE = 10;
  public static final int BREAKSTRING = 12;
  public static final int FUNCTION = 14;
  public static final int TYPEID = 16;
  public static final int FUNNAME = 18;
  public static final int RETS = 20;
  public static final int ARGS = 22;
  public static final int BREAKINARGS = 24;
  public static final int WHITESEOL = 26;
  public static final int CLEANFIRST = 28;
  public static final int CLEAN = 30;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\1\0\10\1\1\2\1\3\2\4\1\5\22\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\21\1\23\1\24\12\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\7\1\33\2\11"+
    "\1\34\1\35\1\36\1\37\1\11\1\40\1\41\3\11"+
    "\1\42\1\11\1\43\1\44\1\11\1\45\1\46\1\47"+
    "\2\11\1\50\3\11\1\51\1\52\1\53\1\54\1\7"+
    "\1\1\1\55\1\56\1\57\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\11\1\66\1\67\1\70\1\71\1\72"+
    "\1\73\1\74\1\75\1\76\1\77\1\100\1\11\1\101"+
    "\1\102\1\103\1\37\1\104\1\105\1\106\1\33\6\1"+
    "\1\4\u01a2\1\2\4\326\1\u0100\4";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\2\0\1\1\12\0\1\3\1\4"+
    "\1\5\2\6\1\7\1\10\1\11\1\12\1\10\1\13"+
    "\1\14\1\15\1\16\2\17\1\20\1\17\1\21\1\12"+
    "\1\22\1\17\1\23\21\10\2\1\1\24\1\25\1\26"+
    "\1\1\1\27\1\30\1\2\1\31\1\2\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\37\1\41\1\42"+
    "\1\43\1\1\1\44\1\45\1\1\1\46\2\47\2\46"+
    "\1\37\1\50\1\37\1\51\1\52\1\53\1\37\1\54"+
    "\1\52\1\55\1\37\1\56\1\37\1\52\1\57\1\37"+
    "\1\60\1\37\1\61\1\62\1\63\1\64\1\37\1\65"+
    "\2\37\2\66\1\45\1\37\2\67\1\70\1\52\1\71"+
    "\1\72\1\73\3\74\2\10\1\0\1\75\1\17\1\12"+
    "\1\17\1\21\1\76\1\21\1\77\1\100\1\101\10\10"+
    "\1\102\15\10\4\0\1\103\2\0\1\104\3\0\1\105"+
    "\1\0\1\106\3\10\1\21\1\74\11\10\1\102\12\10"+
    "\1\0\2\107\1\0\1\110\6\10\1\102\1\10\1\111"+
    "\35\10\1\112\1\113\1\10\1\114";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\216\0\325\0\u011c\0\u0163\0\u01aa\0\u01f1"+
    "\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2\0\u0429"+
    "\0\u0470\0\u0470\0\u0470\0\u0470\0\u04b7\0\u0470\0\u04fe\0\u0470"+
    "\0\u04fe\0\u0545\0\u058c\0\u0470\0\u0470\0\u0470\0\u05d3\0\u0470"+
    "\0\u061a\0\u0661\0\u06a8\0\u0470\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\u0927\0\u096e\0\u09b5\0\u09fc"+
    "\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6\0\u0bed\0\u0c34"+
    "\0\u0c7b\0\u0470\0\u0cc2\0\u0470\0\u0cc2\0\u0d09\0\u0470\0\u0470"+
    "\0\u0d50\0\u0470\0\u0d97\0\u0470\0\u0470\0\u0470\0\u0470\0\u0470"+
    "\0\u0470\0\u0dde\0\u0dde\0\u0e25\0\u0e25\0\u0470\0\u0e6c\0\u0470"+
    "\0\u0470\0\u0eb3\0\u0470\0\u0470\0\u0efa\0\u0f41\0\u0f88\0\u0fcf"+
    "\0\u1016\0\u1016\0\u0470\0\u105d\0\u0470\0\u10a4\0\u0470\0\u10eb"+
    "\0\u1132\0\u1132\0\u0470\0\u1179\0\u11c0\0\u1207\0\u1207\0\u0470"+
    "\0\u124e\0\u0470\0\u0470\0\u0470\0\u1295\0\u1295\0\u0470\0\u12dc"+
    "\0\u1323\0\u0470\0\u136a\0\u1323\0\u13b1\0\u0470\0\u13f8\0\u143f"+
    "\0\u1486\0\u0470\0\u14cd\0\u1514\0\u04fe\0\u155b\0\u15a2\0\u15e9"+
    "\0\u1630\0\u058c\0\u0470\0\u1677\0\u16be\0\u1705\0\u174c\0\u0470"+
    "\0\u1793\0\u0470\0\u0470\0\u0470\0\u17da\0\u1821\0\u1868\0\u18af"+
    "\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u04fe\0\u1a12\0\u1a59\0\u1aa0"+
    "\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91\0\u1cd8"+
    "\0\u1d1f\0\u1d66\0\u0cc2\0\u1dad\0\u1df4\0\u0e25\0\u0f41\0\u105d"+
    "\0\u10a4\0\u0470\0\u10eb\0\u1179\0\u1e3b\0\u12dc\0\u1323\0\u0470"+
    "\0\u1e82\0\u1ec9\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073"+
    "\0\u20ba\0\u2101\0\u2148\0\u218f\0\u21d6\0\u221d\0\u2264\0\u22ab"+
    "\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455\0\u249c\0\u24e3"+
    "\0\u252a\0\u2571\0\u0470\0\u25b8\0\u25ff\0\u0470\0\u2646\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u04fe\0\u287e"+
    "\0\u28c5\0\u290c\0\u2953\0\u299a\0\u29e1\0\u2a28\0\u2a6f\0\u2ab6"+
    "\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19\0\u2c60\0\u2ca7\0\u2cee"+
    "\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51\0\u2e98\0\u2edf\0\u2f26"+
    "\0\u2f6d\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u0470\0\u30d0\0\u04fe";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\21\1\22\1\23\1\24\1\0\1\25\1\26\1\27"+
    "\1\30\1\27\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\22\1\41\1\42\1\43\1\44\1\22"+
    "\1\45\1\46\1\47\1\46\12\27\1\50\1\51\1\52"+
    "\1\35\1\40\1\36\1\40\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\2\27\1\61\4\27\1\62\1\63\1\64"+
    "\1\65\1\66\1\67\1\27\1\70\2\27\1\35\1\40"+
    "\1\36\2\71\1\72\1\24\1\71\1\25\2\71\1\73"+
    "\3\71\1\74\1\75\5\71\1\76\4\71\1\77\1\71"+
    "\1\100\54\71\1\21\2\101\1\102\1\101\1\103\2\101"+
    "\1\104\3\101\1\105\1\106\12\101\1\107\1\101\1\110"+
    "\54\101\3\111\1\24\1\0\1\25\1\111\1\112\1\111"+
    "\1\112\1\113\1\112\20\111\15\112\4\111\27\112\5\111"+
    "\1\114\1\24\1\0\1\25\1\115\7\111\1\116\70\111"+
    "\2\117\1\120\1\24\1\117\1\25\1\121\5\117\1\74"+
    "\5\117\1\111\1\117\1\122\2\117\1\111\1\77\1\117"+
    "\1\100\54\117\2\123\1\120\1\124\1\0\1\125\1\121"+
    "\14\123\1\126\1\127\62\123\4\111\1\0\1\130\1\111"+
    "\1\131\1\111\1\131\1\132\1\131\20\111\15\131\1\133"+
    "\3\111\27\131\5\111\1\134\1\111\1\0\1\130\1\134"+
    "\7\111\1\135\5\111\1\136\4\111\1\137\57\111\1\140"+
    "\1\111\1\0\1\130\1\140\1\141\1\111\1\141\1\142"+
    "\1\141\2\111\1\143\5\111\1\144\7\111\15\141\4\111"+
    "\27\141\5\111\1\145\1\111\1\0\1\130\1\145\1\146"+
    "\1\111\1\146\1\147\1\146\6\111\1\150\1\151\5\111"+
    "\1\152\2\111\15\146\1\153\1\111\1\154\1\111\27\146"+
    "\5\111\1\145\1\111\1\0\1\130\1\145\1\155\1\111"+
    "\1\155\1\156\1\155\3\111\1\157\2\111\1\150\1\160"+
    "\10\111\15\155\4\111\27\155\5\111\1\161\1\162\1\0"+
    "\1\163\1\164\15\111\1\165\62\111\4\166\1\0\1\167"+
    "\1\121\100\166\2\111\1\170\1\171\1\0\1\171\1\170"+
    "\100\111\2\172\1\173\1\174\1\0\1\174\1\173\100\172"+
    "\112\0\1\24\112\0\1\27\1\0\2\27\12\0\1\27"+
    "\6\0\15\27\4\0\27\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\3\27\1\175\7\27\1\175\1\27"+
    "\4\0\4\27\1\176\1\175\2\27\1\177\3\27\1\200"+
    "\1\27\1\201\2\27\2\175\4\27\14\0\1\202\13\0"+
    "\1\202\1\0\1\22\4\0\15\202\4\0\27\202\23\0"+
    "\1\40\103\0\1\203\2\0\1\204\2\0\1\205\1\206"+
    "\1\207\24\0\1\206\1\0\1\40\55\0\1\40\1\210"+
    "\105\0\1\207\1\0\1\43\7\0\2\211\21\0\2\211"+
    "\56\0\1\212\1\213\105\0\1\40\106\0\1\214\64\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\1\215\14\27"+
    "\4\0\27\27\12\0\1\27\1\0\2\27\12\0\1\27"+
    "\6\0\6\27\1\216\6\27\4\0\27\27\12\0\1\27"+
    "\1\0\2\27\12\0\1\27\6\0\12\27\1\217\2\27"+
    "\4\0\27\27\12\0\1\27\1\0\2\27\12\0\1\27"+
    "\6\0\15\27\4\0\1\27\1\220\16\27\1\221\6\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\20\27\1\222\6\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\1\223\14\27\1\224"+
    "\11\27\12\0\1\27\1\0\2\27\12\0\1\27\6\0"+
    "\15\27\4\0\15\27\1\225\11\27\12\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\15\27\4\0\12\27\1\226"+
    "\1\27\1\227\10\27\1\230\1\27\12\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\15\27\4\0\15\27\1\231"+
    "\5\27\1\232\3\27\12\0\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\4\0\5\27\1\225\21\27\12\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\22\27\1\233\4\27\12\0\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\4\0\1\234\26\27\12\0\1\27"+
    "\1\0\2\27\12\0\1\27\6\0\15\27\4\0\23\27"+
    "\1\230\3\27\12\0\1\27\1\0\2\27\12\0\1\27"+
    "\6\0\15\27\4\0\4\27\1\235\22\27\12\0\1\27"+
    "\1\0\2\27\12\0\1\27\6\0\15\27\4\0\4\27"+
    "\1\236\17\27\1\237\2\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\7\27\1\240\10\27"+
    "\1\241\6\27\12\0\1\27\1\0\2\27\12\0\1\27"+
    "\6\0\15\27\4\0\7\27\1\242\17\27\3\0\2\71"+
    "\2\0\1\71\1\0\2\71\1\243\3\71\1\0\1\243"+
    "\5\71\1\244\4\71\1\0\1\71\1\0\54\71\10\0"+
    "\1\71\4\0\1\71\71\0\2\71\2\0\1\71\1\0"+
    "\2\71\1\0\3\71\2\0\5\71\1\245\4\71\1\0"+
    "\1\71\1\0\54\71\1\0\2\101\1\0\4\101\1\0"+
    "\3\101\2\0\12\101\1\0\1\101\1\0\54\101\1\0"+
    "\2\101\1\102\4\101\1\0\3\101\2\0\12\101\1\0"+
    "\1\101\1\0\54\101\7\0\1\112\1\0\2\112\12\0"+
    "\1\112\6\0\15\112\4\0\27\112\5\0\1\246\3\0"+
    "\1\246\7\0\1\116\70\0\2\117\2\0\1\117\2\0"+
    "\5\117\1\0\5\117\1\0\1\117\1\0\2\117\2\0"+
    "\1\117\1\0\56\117\2\0\1\117\2\0\5\117\1\0"+
    "\5\117\1\0\1\117\1\210\2\117\2\0\1\117\1\0"+
    "\54\117\3\0\1\124\126\0\1\247\107\0\1\210\65\0"+
    "\1\111\112\0\1\131\1\0\2\131\12\0\1\131\6\0"+
    "\15\131\4\0\27\131\5\0\1\250\3\0\1\250\15\0"+
    "\1\251\106\0\1\252\64\0\1\253\3\0\1\253\15\0"+
    "\1\254\71\0\1\141\1\0\2\141\12\0\1\141\6\0"+
    "\15\141\4\0\27\141\27\0\1\116\64\0\1\145\3\0"+
    "\1\145\107\0\1\146\1\0\2\146\12\0\1\146\6\0"+
    "\15\146\4\0\27\146\26\0\1\255\72\0\1\155\1\0"+
    "\2\155\12\0\1\155\6\0\15\155\4\0\27\155\26\0"+
    "\1\256\65\0\1\257\1\162\1\0\1\163\1\257\103\0"+
    "\1\162\127\0\1\260\65\0\1\166\105\0\1\170\1\171"+
    "\1\0\1\171\1\170\103\0\1\171\1\0\1\171\103\0"+
    "\1\173\3\0\1\173\103\0\1\174\1\0\1\174\110\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\16\27\1\261\10\27\12\0\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\4\0\14\27\1\262\12\27\12\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\1\263\26\27\12\0\1\27\1\0\2\27\12\0\1\27"+
    "\6\0\15\27\4\0\10\27\1\175\16\27\23\0\1\40"+
    "\2\0\1\40\106\0\1\205\106\0\1\40\110\0\1\207"+
    "\7\0\2\211\21\0\2\211\46\0\1\264\3\0\1\264"+
    "\70\0\1\27\1\0\2\27\12\0\1\27\6\0\5\27"+
    "\1\265\7\27\4\0\27\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\10\27\1\266\4\27\4\0\27\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\1\267"+
    "\14\27\4\0\27\27\12\0\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\4\0\15\27\1\270\11\27\12\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\6\27\1\271\20\27\12\0\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\4\0\4\27\1\272\22\27\12\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\21\27\1\273\1\274\4\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\14\27\1\275\12\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\21\27\1\276\5\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\3\27\1\277\23\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\10\27\1\300\16\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\20\27\1\225\6\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\14\27\1\301\12\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\7\27\1\302\17\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\23\27\1\303\3\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\21\27\1\304\1\305"+
    "\4\27\12\0\1\27\1\0\2\27\12\0\1\27\6\0"+
    "\15\27\4\0\12\27\1\306\14\27\12\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\15\27\4\0\10\27\1\307"+
    "\16\27\12\0\1\27\1\0\2\27\12\0\1\27\6\0"+
    "\15\27\4\0\4\27\1\310\22\27\12\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\15\27\4\0\26\27\1\225"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\10\27\1\311\16\27\3\0\2\71\2\0\1\71"+
    "\1\0\2\71\1\0\3\71\2\0\5\71\1\0\4\71"+
    "\1\0\1\71\1\0\54\71\2\0\1\312\1\313\1\0"+
    "\1\314\1\312\14\0\1\245\1\315\105\0\1\316\72\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\21\27\1\175\5\27\12\0\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\4\0\5\27\1\175\21\27\12\0"+
    "\1\27\1\0\2\27\12\0\1\27\6\0\15\27\4\0"+
    "\14\27\1\175\12\27\30\0\1\264\70\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\4\27\1\317\10\27\4\0"+
    "\27\27\12\0\1\27\1\0\2\27\12\0\1\27\6\0"+
    "\1\27\1\320\13\27\4\0\27\27\12\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\5\27\1\175\7\27\4\0"+
    "\27\27\12\0\1\27\1\0\2\27\12\0\1\27\6\0"+
    "\15\27\4\0\20\27\1\300\6\27\12\0\1\27\1\0"+
    "\2\27\12\0\1\27\6\0\15\27\4\0\23\27\1\321"+
    "\3\27\12\0\1\27\1\0\2\27\12\0\1\27\6\0"+
    "\15\27\4\0\1\322\26\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\4\27\1\225\22\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\2\27\1\323\24\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\22\27\1\324\4\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\4\27\1\325\22\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\5\27\1\326\21\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\22\27\1\327\4\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\2\27\1\330\24\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\4\27\1\331\22\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\21\27\1\332\5\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\23\27\1\333\3\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\23\27\1\334\3\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\4\27\1\335\22\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\22\27\1\274\4\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\14\27\1\225\12\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\12\27\1\273\14\27"+
    "\5\0\1\312\1\313\1\0\1\314\1\312\15\0\1\315"+
    "\65\0\1\313\127\0\1\313\71\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\7\27\1\336\5\27\4\0\27\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\5\27"+
    "\1\337\7\27\4\0\27\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\13\27\1\340\13\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\11\27\1\327\15\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\7\27\1\225\17\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\10\27\1\341\16\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\10\27\1\61\16\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\23\27\1\342\3\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\22\27\1\343\4\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\20\27\1\344\6\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\4\27\1\327\22\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\13\27\1\332\13\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\20\27\1\345\6\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\2\27\1\346\24\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\6\27\1\347\6\27\4\0\27\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\11\27"+
    "\1\175\3\27\4\0\27\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\4\27\1\350\22\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\14\27\1\351\12\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\14\27\1\352\12\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\10\27\1\353\16\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\24\27\1\354\2\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\14\27\1\327\12\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\22\27\1\225\4\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\2\27"+
    "\1\175\12\27\4\0\27\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\14\27\1\355\12\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\23\27\1\332\3\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\2\27\1\356\24\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\15\27\1\357\11\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\10\27\1\360\16\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\22\27\1\361\4\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\22\27\1\362\4\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\14\27\1\363\12\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\21\27\1\273\5\27"+
    "\12\0\1\27\1\0\2\27\12\0\1\27\6\0\15\27"+
    "\4\0\21\27\1\225\5\27\12\0\1\27\1\0\2\27"+
    "\12\0\1\27\6\0\15\27\4\0\10\27\1\364\16\27"+
    "\5\0\1\365\3\0\1\365\1\27\1\0\2\27\12\0"+
    "\1\27\6\0\15\27\1\366\3\0\27\27\12\0\1\27"+
    "\1\0\2\27\12\0\1\27\6\0\15\27\4\0\15\27"+
    "\1\367\11\27\5\0\1\365\3\0\1\365\107\0\1\27"+
    "\1\0\2\27\12\0\1\27\6\0\15\27\4\0\14\27"+
    "\1\370\12\27\3\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12567];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\1\2\0\1\1\12\0\4\11\1\1\1\11"+
    "\1\1\1\11\3\1\3\11\1\1\1\11\3\1\1\11"+
    "\25\1\1\11\1\1\1\11\2\1\2\11\1\1\1\11"+
    "\1\1\6\11\4\1\1\11\1\1\2\11\1\1\2\11"+
    "\6\1\1\11\1\1\1\11\1\1\1\11\3\1\1\11"+
    "\4\1\1\11\1\1\3\11\2\1\1\11\2\1\1\11"+
    "\3\1\1\11\3\1\1\11\7\1\1\0\1\11\4\1"+
    "\1\11\1\1\3\11\26\1\4\0\1\1\2\0\1\11"+
    "\3\0\1\1\1\0\1\11\31\1\1\0\1\11\1\1"+
    "\1\0\1\11\47\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
    private static Set<String> commands;
    private static Set<String> macros;

    private int beginString;
    private boolean transposable;
    private boolean breakstring;
    private boolean breakargs;
    private int whitesOnFirstLine;
    private int saveLexState;

    private String id;
    private List<String> returnValues = new ArrayList<String>();
    private List<String> argsValues = new ArrayList<String>();
    private List<String> localFun = new ArrayList<String>();

    private AbstractScilabCodeHandler handler;

    public ScilabLexer(String[] primFile, String[] macroFile) {
       if (commands == null) {
          commands = new HashSet<String>();
          macros = new HashSet<String>();
          loadNames(primFile, commands);
          loadNames(macroFile, macros);
       }
    }

    public ScilabLexer(String primFile, String macroFile) {
       this(new String[]{primFile}, new String[]{macroFile});
    }

    public ScilabLexer(Set<String> primitives, Set<String> macros) {
       commands = primitives;
       this.macros = macros;
    }

    private void loadNames(String[] files, Set<String> set) {
       for (int i = 0; i < files.length; i++) {
          loadNames(files[i], set);
       }
    }

    private void loadNames(String file, Set<String> set) {
       if (file == null) {
          return;
       }
       BufferedReader input = null;
       try {
          input = new BufferedReader(new FileReader(file));
          String line = null;
          while ((line = input.readLine()) != null) {
             set.add(line);
          }
       } catch (IOException e) {
          System.err.println(e);
       }
       if (input != null) {
          try {
             input.close();
          } catch (IOException e) {
             System.err.println(e);
          }
       }
    }

    private String trimEnd(String str) {
        int end = str.length() - 1;
        int i = end;
        for (; i >= 0; i--) {
           char c = str.charAt(i);
           if (c != ' ' && c != '\t' && c != '\r' && c != '\n') {
              break;
           }
        }
        if (i != end) {
           return str.substring(0, i + 1);
        }

        return str;
    }

    public String convert(AbstractScilabCodeHandler h, String code) {
        Reader reader = new StringReader(trimEnd(code));
        String str = convert(h, reader, true);
        try {
          reader.close();
        } catch (IOException e) { }

        return str;
    }

    public String convert(AbstractScilabCodeHandler h, Reader code, boolean ret) {
        if (code == null) {
           return null;
        } else {
           handler = h;
           transposable = false;
           breakargs = false;
           breakstring = false;
           whitesOnFirstLine = 0;
           localFun.clear();
           yyreset(code);
           yybegin(CLEANFIRST);
           try {
               yylex();
           } catch (IOException e) {
               return null;
           }
           if (ret) {
               return h.toString();
           }
           return "";
        }
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScilabLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  public void yylex() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { handler.handleString(yytext());
            }
          // fall through
          case 77: break;
          case 2:
            { handler.handleComment(yytext());
            }
          // fall through
          case 78: break;
          case 3:
            { return;
            }
          // fall through
          case 79: break;
          case 4:
            { transposable = false;
                                   handler.handleDefault(yytext());
            }
          // fall through
          case 80: break;
          case 5:
            { transposable = false;
                                   handler.handleNothing("    ");
            }
          // fall through
          case 81: break;
          case 6:
            { handler.handleNothing("\n");
                                   saveLexState = YYINITIAL;
                                   yybegin(CLEAN);
            }
          // fall through
          case 82: break;
          case 7:
            { transposable = false;
                                   handler.handleNothing(" ");
            }
          // fall through
          case 83: break;
          case 8:
            { transposable = true;
                                   String str = yytext();
                                   if (commands.contains(str)) {
                                       yybegin(COMMANDS);
                                       handler.handleCommand(str);
                                   } else if (macros.contains(str)) {
                                       yybegin(COMMANDS);
                                       handler.handleMacro(str);
                                   } else if (localFun.contains(str)) {
                                        yybegin(COMMANDS);
                                        handler.handleFunctionId(str);
                                   } else {
                                       if (returnValues.contains(str) || argsValues.contains(str)) {
                                           handler.handleInputOutputArgs(str);
                                       }  else {
                                           handler.handleId(str);
                                       }
                                   }
            }
          // fall through
          case 84: break;
          case 9:
            { transposable = false;
                                   beginString = zzStartRead;
                                   yybegin(QSTRING);
                                   handler.handleString("&#0034;");
            }
          // fall through
          case 85: break;
          case 10:
            { transposable = false;
                                   handler.handleSpecial(yytext());
            }
          // fall through
          case 86: break;
          case 11:
            { transposable = false;
                                   handler.handleOperator("&#0038;");
            }
          // fall through
          case 87: break;
          case 12:
            { if (transposable) {
                                       handler.handleOperator("&#0039;");
                                   } else {
                                       beginString = zzStartRead;
                                       yybegin(QSTRING);
                                       handler.handleString("&#0039;");
                                   }
            }
          // fall through
          case 88: break;
          case 13:
            { transposable = false;
                                   handler.handleOpenClose(yytext());
            }
          // fall through
          case 89: break;
          case 14:
            { transposable = true;
                                   handler.handleOpenClose(yytext());
            }
          // fall through
          case 90: break;
          case 15:
            { transposable = false;
                                   handler.handleOperator(yytext());
            }
          // fall through
          case 91: break;
          case 16:
            { transposable = false;
                                   yybegin(FIELD);
                                   handler.handleOperator(yytext());
            }
          // fall through
          case 92: break;
          case 17:
            { transposable = true;
                                   handler.handleNumber(yytext());
            }
          // fall through
          case 93: break;
          case 18:
            { transposable = false;
                                   handler.handleOperator("&#0060;");
            }
          // fall through
          case 94: break;
          case 19:
            { transposable = false;
                                   handler.handleOperator("&#0062;");
            }
          // fall through
          case 95: break;
          case 20:
            { transposable = false;
                                   yybegin(YYINITIAL);
                                   handler.handleString("&#0034;");
            }
          // fall through
          case 96: break;
          case 21:
            { transposable = false;
                                   handler.handleString("&#0038;");
            }
          // fall through
          case 97: break;
          case 22:
            { transposable = false;
                                   yybegin(YYINITIAL);
                                   handler.handleString("&#0039;");
            }
          // fall through
          case 98: break;
          case 23:
            { transposable = false;
                                   handler.handleString("&#0060;");
            }
          // fall through
          case 99: break;
          case 24:
            { transposable = false;
                                   handler.handleString("&#0062;");
            }
          // fall through
          case 100: break;
          case 25:
            { if (breakstring) {
                                     saveLexState = QSTRING;
                                     breakstring = false;
                                   } else if (breakargs) {
                                     saveLexState = WHITESEOL;
                                     breakargs = false;
                                   } else {
                                     saveLexState = YYINITIAL;
                                   }
                                   handler.handleNothing("\n");
                                   yybegin(CLEAN);
            }
          // fall through
          case 101: break;
          case 26:
            { handler.handleComment("&#0034;");
            }
          // fall through
          case 102: break;
          case 27:
            { handler.handleComment("&#0038;");
            }
          // fall through
          case 103: break;
          case 28:
            { handler.handleComment("&#0039;");
            }
          // fall through
          case 104: break;
          case 29:
            { handler.handleComment("&#0060;");
            }
          // fall through
          case 105: break;
          case 30:
            { handler.handleComment("&#0062;");
            }
          // fall through
          case 106: break;
          case 31:
            { yypushback(1);
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 107: break;
          case 32:
            { handler.handleField(yytext());
            }
          // fall through
          case 108: break;
          case 33:
            { yybegin(COMMANDSWHITE);
                                   handler.handleNothing("    ");
            }
          // fall through
          case 109: break;
          case 34:
            { yybegin(COMMANDSWHITE);
                                   handler.handleNothing(" ");
            }
          // fall through
          case 110: break;
          case 35:
            { yypushback(yylength());
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 111: break;
          case 36:
            { handler.handleNothing("    ");
            }
          // fall through
          case 112: break;
          case 37:
            { handler.handleNothing(" ");
            }
          // fall through
          case 113: break;
          case 38:
            { handler.handleDefault(yytext());
            }
          // fall through
          case 114: break;
          case 39:
            { if (breakstring) {
                                      breakstring = false;
                                      saveLexState = QSTRING;
                                   } else {
                                      saveLexState = YYINITIAL;
                                   }
                                   handler.handleNothing("\n");
                                   yybegin(CLEAN);
            }
          // fall through
          case 115: break;
          case 40:
            { id = yytext();
                                   yybegin(TYPEID);
            }
          // fall through
          case 116: break;
          case 41:
            { handler.handleOpenClose("[");
                                   yybegin(RETS);
            }
          // fall through
          case 117: break;
          case 42:
            { 
            }
          // fall through
          case 118: break;
          case 43:
            { localFun.add(id);
                                   handler.handleFunctionIdDecl(id);
                                   handler.handleOpenClose("(");
                                   yybegin(ARGS);
            }
          // fall through
          case 119: break;
          case 44:
            { returnValues.add(id);
                                   handler.handleInputOutputArgsDecl(id);
                                   handler.handleOperator("=");
                                   yybegin(FUNNAME);
            }
          // fall through
          case 120: break;
          case 45:
            { id = yytext();
                                   localFun.add(id);
                                   handler.handleFunctionIdDecl(id);
            }
          // fall through
          case 121: break;
          case 46:
            { handler.handleOpenClose("(");
                                   yybegin(ARGS);
            }
          // fall through
          case 122: break;
          case 47:
            { id = yytext();
                                   returnValues.add(id);
                                   handler.handleInputOutputArgsDecl(id);
            }
          // fall through
          case 123: break;
          case 48:
            { handler.handleDefault(", ");
            }
          // fall through
          case 124: break;
          case 49:
            { handler.handleOperator("=");
                                   yybegin(FUNNAME);
            }
          // fall through
          case 125: break;
          case 50:
            { handler.handleOpenClose("[");
            }
          // fall through
          case 126: break;
          case 51:
            { handler.handleOpenClose("]");
            }
          // fall through
          case 127: break;
          case 52:
            { id = yytext();
                                   argsValues.add(id);
                                   handler.handleInputOutputArgsDecl(id);
            }
          // fall through
          case 128: break;
          case 53:
            { handler.handleOpenClose(")");
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 129: break;
          case 54:
            { handler.handleNothing("\n");
                                   saveLexState = WHITESEOL;
                                   yybegin(CLEAN);
            }
          // fall through
          case 130: break;
          case 55:
            { yypushback(1);
                                   yybegin(ARGS);
            }
          // fall through
          case 131: break;
          case 56:
            { whitesOnFirstLine = yylength();
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 132: break;
          case 57:
            { yypushback(1);
                                   yybegin(saveLexState);
            }
          // fall through
          case 133: break;
          case 58:
            { int len = yylength() - whitesOnFirstLine;
                                   if (len > 0) {
                                      yypushback(len);
                                   }
                                   yybegin(saveLexState);
            }
          // fall through
          case 134: break;
          case 59:
            { handler.handleNothing("\n");
            }
          // fall through
          case 135: break;
          case 60:
            { transposable = true;
                                   handler.handleConstants(yytext());
            }
          // fall through
          case 136: break;
          case 61:
            { transposable = false;
                                   handler.handleOperator(".&#0039;");
            }
          // fall through
          case 137: break;
          case 62:
            { transposable = false;
                                   yypushback(2);
                                   yybegin(COMMENT);
            }
          // fall through
          case 138: break;
          case 63:
            { transposable = false;
                                   handler.handleOperator("&#0060;=");
            }
          // fall through
          case 139: break;
          case 64:
            { transposable = false;
                                   handler.handleOperator("&#0060;&#0062;");
            }
          // fall through
          case 140: break;
          case 65:
            { transposable = false;
                                   handler.handleOperator("&#0062;=");
            }
          // fall through
          case 141: break;
          case 66:
            { transposable = false;
                                   handler.handleSKeywords(yytext());
            }
          // fall through
          case 142: break;
          case 67:
            { breakstring = true;
                                   handler.handleSpecial(yytext());
            }
          // fall through
          case 143: break;
          case 68:
            { localFun.add(id);
                                   handler.handleFunctionIdDecl(id);
                                   yypushback(yylength());
                                   yybegin(YYINITIAL);
            }
          // fall through
          case 144: break;
          case 69:
            { handler.handleSpecial(yytext());
                                   yybegin(BREAKINARGS);
            }
          // fall through
          case 145: break;
          case 70:
            { breakargs = true;
                                   yypushback(2);
                                   yybegin(COMMENT);
            }
          // fall through
          case 146: break;
          case 71:
            { yypushback(yylength());
                                   yybegin(BREAKSTRING);
                                   transposable = false;
                                   handler.handleString(yytext());
            }
          // fall through
          case 147: break;
          case 72:
            { handler.handleNothing("...");
            }
          // fall through
          case 148: break;
          case 73:
            { transposable = false;
                                   handler.handleCKeywords(yytext());
            }
          // fall through
          case 149: break;
          case 74:
            { transposable = false;
                                   handler.handleFKeywords("function");
                                   handler.handleNothing(" ");
                                   yybegin(FUNCTION);
            }
          // fall through
          case 150: break;
          case 75:
            { transposable = false;
                                   handler.handleFKeywords("function");
                                   handler.handleNothing(" ");
                                   handler.handleOpenClose("[");
                                   yybegin(RETS);
            }
          // fall through
          case 151: break;
          case 76:
            { transposable = false;
                                   returnValues.clear();
                                   argsValues.clear();
                                   handler.handleFKeywords("endfunction");
            }
          // fall through
          case 152: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
