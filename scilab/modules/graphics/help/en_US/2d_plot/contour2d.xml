<?xml version="1.0" encoding="UTF-8"?>
<!--
 * Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) ENPC - Jean-Philippe Chancelier
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2021 - 2023 - Samuel GOUGEON - Le Mans Université
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 -->
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
          xmlns:svg="http://www.w3.org/2000/svg" xmlns:mml="http://www.w3.org/1998/Math/MathML"
          xmlns:db="http://docbook.org/ns/docbook" xmlns:scilab="http://www.scilab.org"
          xml:lang="en" xml:id="contour2d">
    <refnamediv>
        <refname>contour2d</refname>
        <refpurpose>level curves of a surface on a 2D plot
        </refpurpose>
    </refnamediv>
    <refsynopsisdiv>
        <title>Syntax</title>
        <synopsis>
            contour2d(x, y, z)
            contour2d(x, y, z, levels)
            contour2d(x, y, z, levels, [style, strf, leg, rect, nax, fpf])
            contour2d(x, y, z, levels, &lt;opt_args>)

            contour2d(x, y, func, …)
            contour2d(x, y, list(func,a,b,..), …)
        </synopsis>
    </refsynopsisdiv>
    <refsection>
        <title>Arguments</title>
        <variablelist>
            <varlistentry>
                <term>x, y</term>
                <listitem>
                    <para>
                        two real vectors sorted in strictly increasing order, of sizes
                        <literal>nx</literal> and <literal>ny</literal>, defining the grid.
                        <varname>x</varname> is along the horizontal axis, and
                        <varname>y</varname> along the vertical one.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>z</term>
                <listitem>
                    <para>
                        matrix of real numbers of size <literal>(nx,ny)</literal>, directly
                        providing the elevation values <literal>z(x,y)</literal>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>func</term>
                <listitem>
                    <para>
                        identifier of a Scilab function (builtin or macro), defining the surface
                        <literal>z=func(x,y)</literal>.
                    </para>
                    <para>
                        When <varname>f</varname> uses additional parameters <literal>a, b, …</literal>
                        as with <literal>z = func(x, y, a, b, …)</literal>, they can be provided
                        to <literal>contour2d</literal> by specifying
                        <literal>list(func, a, b,..)</literal> instead of only <varname>func</varname>.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>levels</term>
                <listitem>
                    <para>
                        positive integer, or vector: specification of the z values for which
                        iso-elevation curves must be computed and displayed:
                    </para>
                    <itemizedlist>
                        <listitem>
                            <para>
                                If <literal>levels</literal> is a positive integer, it specifies
                                the number of equally spaced levels to consider in the
                                ]min(z),max(z)[ interval.
                            </para>
                            <note>
                                Note that the <literal>zmin</literal> and <literal>zmax</literal>
                                levels are not drawn; They are most often reduced to points.
                                In case of flat roof or floor, they can be added with
                            </note>
                            <screen><![CDATA[
[im,jm] = find(z == zmin); // or zmax
plot2d(x(im)',y(jm)',-9,"000")
]]></screen>
                        </listitem>
                        <listitem>
                            If <literal>levels</literal> is a vector, <literal>levels(i)</literal>
                            gives the value of the <literal>i</literal>-th level curve.
                            <para/>
                            To specify a single <literal>level</literal> to draw,
                            <literal>[level, level]</literal> can be used.
                        </listitem>
                    </itemizedlist>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>style, strf, leg, rect, nax</term>
                <listitem>
                    <para>
                        see <link linkend="plot2d">plot2d</link>. <literal>style</literal> can be
                        used to set explicit dash styles or colors of level curves. It must have the
                        same size as the number of levels.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>fpf</term>
                <listitem>
                    <para>
                        single string specifying the <link linkend="printf_conversion">C-format</link>
                        of labels to use to print the level values on level curves. Example:
                        <literal>fpf="%.3f"</literal>. Use <literal>fpf=" "</literal> to cancel
                        level printing. The default format is set according to the z-step.
                    </para>
                </listitem>
            </varlistentry>
            <varlistentry>
                <term>&lt;opt_args></term>
                <listitem>
                    <para>
                        This represents a sequence of statements
                        <literal>key1=value1, key2=value2</literal>,... where
                        <literal>key1</literal>, <literal>key2</literal>,... can
                        be one of the following: <literal>style</literal>, <literal>leg</literal>,
                        <literal>rect</literal>, <literal>nax</literal>, <literal>strf</literal> or
                        <literal>axesflag</literal>, <literal>frameflag</literal>,
                        or <literal>fpf</literal>.
                    </para>
                </listitem>
            </varlistentry>
        </variablelist>
    </refsection>
    <refsection>
        <title>Description</title>
        <para>
            <function>contour2d</function> draws level curves of a surface <literal>z(x, y)</literal>
            or <literal>z(i,j) = func(x(i), y(j))</literal> or
            <literal>z(i,j) = func(x(i), y(i), a,b,…)</literal>
            on a 2D plot. The values of <literal>z(x,y)</literal> are given at the grid points
            defined by <varname>x</varname> and <varname>y</varname>.
        </para>
        <para>
            The optional arguments <varname>style</varname>, <varname>strf</varname>,
            <varname>leg</varname>, <varname>rect</varname>, <varname>nax</varname> can be passed
            by a sequence of statements <literal>key1=value1, key2=value2</literal>,... where keys
            may be <literal>style</literal>, <literal>strf</literal>, <literal>leg</literal>,
            <literal>rect</literal>, <literal>nax</literal>. In this case, the order has no special
            meaning.
        </para>
    </refsection>
    <refsection>
        <title>Examples</title>
        <programlisting role="example"><![CDATA[
clf
x = -2:0.1:2;
y = -2:0.1:2;
[X, Y] = ndgrid(x,y);
Z = X .* Y .* exp(1 - X.^2 - Y.^2);
levels = -0.45:.05:0.45;
gcf().color_map = jetcolormap(length(levels)+1);
levels = contour2d(x, y, Z, levels)
     ]]></programlisting>
        <scilab:image>
            clf
            x = -2:0.1:2;
            y = -2:0.1:2;
            [X,Y] = ndgrid(x,y);
            Z = X .* Y .* exp(1-X.^2-Y.^2);
            levels = -0.45:.05:0.45;
            gcf().color_map = jetcolormap(length(levels)+1);
            levels = contour2d(x, y, Z, levels)
        </scilab:image>
        <programlisting role="example"><![CDATA[
clf()
// changing the format of the printing of the levels
contour2d(1:10, 1:10, rand(10,10), 5, rect=[0,0,11,11], fpf="%.2f")
  ]]></programlisting>
        <scilab:image>
            contour2d(1:10,1:10,rand(10,10),5,rect=[0,0,11,11],fpf="%.2f")
        </scilab:image>
        <programlisting role="example"><![CDATA[
// now an example with level numbers drawn in a legend
// Caution there are a number of tricks...
x = linspace(0,4*%pi,80);
z = cos(x')*cos(x);
clf(); f=gcf();
// trick 1: fpf=" " cancels the printing of level values on the level curves
f.color_map = jetcolormap(7);
// trick 2: to be able to put the legend on the right without
//          interfering with the level curves use rect with a xmax
//          value large enough
contour2d(x,x,z,-0.75:0.25:0.75,frameflag=3,rect=[0,0,5*%pi,4*%pi],fpf=" ")
// trick 3: use legends (note that the more practical legend function
//          will not work as soon as one of the level is formed by 2 curves)
legends(string(-0.75:0.25:0.75),1:7,"lr");
xtitle("Some level curves of the function cos(x).cos(y)")
 ]]></programlisting>
        <scilab:image localized="true">
            x = linspace(0,4*%pi,80);
            z = cos(x')*cos(x);

            clf(); f=gcf();

            f.color_map=jetcolormap(7);

            contour2d(x,x,z,-0.75:0.25:0.75,frameflag=3,rect=[0,0,5*%pi,4*%pi],fpf=" ")

            legends(string(-0.75:0.25:0.75),1:7,"lr");
            xtitle("Some level curves of the function cos(x).cos(y)")
        </scilab:image>
    </refsection>
    <refsection role="see also">
        <title>See also</title>
        <simplelist type="inline">
            <member>
                <link linkend="contourf">contourf</link>
            </member>
            <member>
                <link linkend="contour">contour</link>
            </member>
            <member>
                <link linkend="contour2di">contour2di</link>
            </member>
            <member>
                <link linkend="contour2dm">contour2dm</link>
            </member>
            <member>
                <link linkend="plotimplicit">plotimplicit</link>
            </member>
        </simplelist>
    </refsection>
    <refsection role="history">
        <title>History</title>
        <revhistory>
            <revision>
                <revnumber>2023.0</revnumber>
                <revdescription>
                    <varname>fpf</varname> argument added.
                </revdescription>
            </revision>
            <revision>
                <revnumber>2024.0</revnumber>
                <revdescription>
                    <itemizedlist>
                        <listitem>
                            <varname>z</varname> can be a builtin function, or a list allowing a
                            function with extra parameters.
                        </listitem>
                        <listitem>
                            <varname>levels</varname> is now optional: automatic leveling implemented.
                        </listitem>
                        <listitem>
                            <varname>style</varname> can be an expandable scalar.
                        </listitem>
                        <listitem>
                            Labels placement a lot improved. Labels take their curve's color.
                        </listitem>
                    </itemizedlist>
                </revdescription>
            </revision>
        </revhistory>
    </refsection>
</refentry>
