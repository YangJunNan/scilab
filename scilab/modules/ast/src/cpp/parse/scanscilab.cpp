
#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 146
#define YY_END_OF_BUFFER 147
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_acclist[994] =
    {   0,
    16409,  125,  125,  134,  134,  116,  116,  112,  112,  147,
       86,  146,   82,   86,  146,   83,  146,   83,   86,  146,
       76,   86,  146,   80,   86,  146,   28,   86,  146,   76,
       86,  146,   31,   86,  146,   81,   86,  146,   35,   86,
      146,   36,   86,  146,   49,   86,  146,   48,   86,  146,
       38,   86,  146,   47,   86,  146,   68,   86,  146,   50,
       86,  146,   70,   86,  146,   39,   86,  146,   37,   86,
      146,   61,   86,  146,   65,   86,  146,   62,   86,  146,
       27,   86,  146,   66,   86,  146,   51,   86,  146,   67,
       86,  146,   52,   86,  146,   76,   86,  146,   76,   86,

      146,   76,   86,  146,   76,   86,  146,   76,   86,  146,
       76,   86,  146,   76,   86,  146,   76,   86,  146,   76,
       86,  146,   76,   86,  146,   76,   86,  146,   76,   86,
      146,   40,   86,  146,   33,   86,  146,   41,   86,  146,
       27,   86,  146,   86,  146,   86,  146,   86,  146,   86,
      146,   86,  146,   86,  146,   86,  146,   86,  146,   86,
      146,   82,   86,  146,16409,   76,   86,  146,   28,   86,
      146,   76,   86,  146,   76,   86,  146,   76,   86,  146,
       76,   86,  146,   76,   86,  146,   76,   86,  146,   76,
       86,  146,   76,   86,  146,   76,   86,  146,   76,   86,

      146,   76,   86,  146,   76,   86,  146,   76,   86,  146,
       86,  146,   86,  146,   86,  146,   86,  146,   86,  146,
       86,  146,   86,  146,   86,  146,   86,  146,  125,  126,
      146,  124,  146,  124,  126,  146,  123,  126,  146,  122,
      126,  146,  126,  146,  134,  135,  146,  133,  146,  133,
      135,  146,  131,  135,  146,  132,  135,  146,  135,  146,
      116,  117,  146,  115,  146,  115,  117,  146,  117,  146,
      117,  146,  112,  146,  111,  146,  111,  146,  110,  146,
      109,  110,  146,  106,  146,  106,  110,  146,  110,  146,
      101,  146,   82,  101,  146,   91,  146,   91,  101,  146,

       76,  101,  146,   80,  101,  146,   28,  101,  146,   76,
      101,  146,   31,  101,  146,   81,  101,  146,   87,  101,
      146,   88,  101,  146,   49,  101,  146,   95,  101,  146,
       38,  101,  146,   97,  101,  146,   68,  101,  146,   50,
      101,  146,   70,  101,  146,   39,   90,  101,  146,   37,
      101,  146,   61,  101,  146,   65,  101,  146,   62,  101,
      146,   27,  101,  146,   66,  101,  146,   51,  101,  146,
       93,  101,  146,   52,  101,  146,   40,  101,  146,   33,
      101,  146,   94,  101,  146,   27,  101,  146,  101,  146,
      101,  146,  101,  146,  101,  146,  101,  146,  101,  146,

      101,  146,  101,  146,  145,  146,  136,  146,  139,  146,
      139,  146,   80,  146,   81,  146,  141,  145,  146,  138,
      146,  145,  146,  137,  146,  142,  145,  146,  140,  145,
      146,  143,  145,  146,  144,  145,  146,  146,   26,  146,
      146,   26,  146,  146,   26,  146,   26,  146,   26,  146,
       26,  146,   26,  146,   26,  146,   26,  146,   26,  146,
       26,  146,   26,  146,   26,  146,   26,  146,  146,  146,
      146,  146,  146,  146,  146,  146,   82,   84,   84,   83,
       76,   76,    3,   30,   76,    2,   29,   76,   32,   52,
       42,   43,   69,   44,   75,   45,   46,   78,   79,   77,

       74,   70,   77,   77,   63,   60,   59,   64,   76,   76,
       76,   76,   18,   76,   76,   76,   76,   76,    5,   76,
       76,   76,   76,   76,   76,   76,   76,   34,   76,   82,
    16409,   76,   76,    3,   30,   76,    2,   29,   76,   76,
       76,   76,   76,   18,   76,   76,   76,   76,   76,    5,
       76,   76,   76,   76,   76,   76,   76,   76,   76,  125,
      124,  118,  119,  120,  121,  134,  133,  127,  128,  129,
      130,  116,  115,  113,  114,  112,  111,  109,  106,  107,
      108,   82,   92,   89,   99,  100,   90,   91,   30,   76,
       29,   76,  104,   90,  145,  136,  139,   78,  145,   79,

      145,   26,   26,    3,   26,    2,   26,   26,   26,   26,
       26,   18,   26,   26,   26,   26,   26,    5,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   85,   85,   56,
       53,   54,   55,   57,   77,   77,   73,   74,   71,   77,
       72,   77,   58,   76,   76,   76,   76,   76,   76,    9,
       76,   16,   76,   76,   76,   76,   76,   76,   76,   76,
       21,   76,   76,    1,   76, 8217, 8217,   76,   76,   76,
       76,   76,   76,    9,   76,   16,   76,   76,   76,   76,
       76,   76,   76,   76,   21,   76,   76,    1,   76,   96,
       98,  105,  102,  103,   26,   26,   26,   26,   26,   26,

        9,   26,   16,   26,   26,   26,   26,   26,   26,   26,
       26,   21,   26,   26,   71,   72,   77,   77,   76,   76,
       13,   76,   76,   76,    7,   76,   76,   76,   76,   76,
       76,   76,   76,    6,   76,   76,    1,    1,   76,    1,
        1,    1,    1,    1,    1,    1,    1,   76, 8217,   76,
       76,   13,   76,   76,   76,    7,   76,   76,   76,   76,
       76,   76,   76,   76,    6,   76,   76,    1,    1,   76,
        1,    1,    1,    1,    1,    1,    1,    1,   76,   26,
       26,   13,   26,   26,   26,    7,   26,   26,   26,   26,
       26,   26,   26,   26,    6,   26,   26,   26,   76,   76,

       77,   77,   76,   19,   76,   22,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   17,   76,    1,    1,
        1,    1,    1,    1,    1,   76,   76,   76,   19,   76,
       22,   76,   76,   76,   76,   76,   76,   76,   76,   76,
       76,   17,   76,    1, 8217,    1, 8217,    1,    1,    1,
        1,    1,    1,    1,   26,   26,   26,   19,   26,   22,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       17,   26,   77,   77,   76,   76,    8,   76,   76,   76,
       76,   24,   76,   23,   76,   10,   76,   11,   76,    1,
        1,    1,   76,   76,    8,   76,   76,   76,   76,   24,

       76,   23,   76,   10,   76,   11,   76,    1, 8217,    1,
        1,    1,   26,   26,    8,   26,   26,   26,   26,   24,
       26,   23,   26,   10,   26,   11,   26,   77,   76,   76,
       76,   76,   76,    1,   76,   76,   76,   76,   76,   76,
        1,   76,   26,   26,   26,   26,   26,   77,   76,   20,
       76,   76,   14,   76,   76,   76,   20,   76,   76,   14,
       76,   76,   26,   20,   26,   26,   14,   26,   26,    4,
       76,   76,   12,   76,    4,   76,   76,   12,   76,    4,
       26,   26,   12,   26,   76,   76,   26,   15,   76,   15,
       76,   15,   26

    } ;

static const flex_int16_t yy_accept[944] =
    {   0,
        1,    1,    2,    3,    4,    5,    6,    7,    8,    9,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   11,
       13,   16,   18,   21,   24,   27,   30,   33,   36,   39,
       42,   45,   48,   51,   54,   57,   60,   63,   66,   69,
       72,   75,   78,   81,   84,   87,   90,   93,   96,   99,
      102,  105,  108,  111,  114,  117,  120,  123,  126,  129,
      132,  135,  138,  141,  144,  146,  148,  150,  152,  154,
      156,  158,  160,  162,  166,  169,  172,  175,  178,  181,
      184,  187,  190,  193,  196,  199,  202,  205,  208,  211,
      213,  215,  217,  219,  221,  223,  225,  227,  229,  232,

      234,  237,  240,  243,  245,  248,  250,  253,  256,  259,
      261,  264,  266,  269,  271,  273,  275,  277,  279,  281,
      284,  286,  289,  291,  293,  296,  298,  301,  304,  307,
      310,  313,  316,  319,  322,  325,  328,  331,  334,  337,
      340,  343,  346,  350,  353,  356,  359,  362,  365,  368,
      371,  374,  377,  380,  383,  386,  389,  391,  393,  395,
      397,  399,  401,  403,  405,  407,  409,  411,  413,  415,
      417,  420,  422,  424,  426,  429,  432,  435,  438,  439,
      441,  442,  444,  445,  447,  449,  451,  453,  455,  457,
      459,  461,  463,  465,  467,  469,  470,  471,  472,  473,

      474,  475,  476,  477,  478,  479,  480,  480,  480,  481,
      482,  482,  482,  482,  482,  482,  482,  482,  482,  483,
      483,  483,  483,  483,  483,  483,  483,  483,  486,  489,
      490,  491,  491,  492,  493,  494,  495,  496,  497,  498,
      499,  499,  500,  501,  501,  502,  503,  504,  505,  505,
      505,  505,  505,  505,  505,  505,  505,  505,  506,  507,
      507,  508,  508,  509,  509,  509,  510,  511,  512,  513,
      515,  516,  517,  518,  519,  521,  522,  523,  524,  525,
      526,  527,  528,  529,  529,  530,  530,  530,  530,  530,
      530,  530,  530,  530,  532,  532,  532,  532,  532,  532,

      532,  532,  532,  532,  532,  532,  533,  533,  533,  533,
      533,  533,  533,  533,  533,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  537,  540,  541,  542,  543,  544,
      546,  547,  548,  549,  550,  552,  553,  554,  555,  556,
      557,  558,  559,  560,  560,  560,  560,  560,  560,  560,
      560,  560,  561,  562,  563,  564,  565,  566,  567,  568,
      569,  570,  571,  572,  573,  574,  575,  576,  577,  578,
      579,  580,  581,  582,  583,  584,  585,  586,  587,  587,
      588,  589,  591,  593,  593,  593,  594,  595,  596,  597,
      598,  600,  602,  603,  603,  603,  603,  603,  603,  603,

      603,  603,  604,  604,  604,  604,  604,  604,  604,  604,
      604,  606,  608,  609,  610,  611,  612,  614,  615,  616,
      617,  618,  620,  621,  622,  623,  624,  625,  626,  627,
      628,  628,  628,  628,  628,  628,  628,  628,  629,  630,
      630,  630,  630,  630,  630,  630,  630,  630,  630,  630,
      630,  630,  630,  630,  631,  632,  633,  633,  633,  634,
      635,  636,  636,  636,  636,  636,  636,  636,  636,  636,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  638,
      639,  639,  641,  641,  643,  643,  643,  643,  643,  643,
      643,  643,  644,  645,  646,  647,  648,  649,  650,  652,

      654,  655,  656,  657,  658,  659,  660,  661,  663,  664,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  667,
      668,  668,  668,  668,  668,  668,  668,  668,  668,  668,
      668,  668,  668,  668,  668,  669,  670,  671,  672,  673,
      674,  676,  678,  679,  680,  681,  682,  683,  684,  685,
      687,  688,  690,  690,  690,  690,  691,  692,  693,  694,
      695,  695,  695,  695,  695,  695,  695,  695,  695,  695,
      695,  695,  695,  695,  695,  696,  697,  698,  699,  700,

      701,  703,  705,  706,  707,  708,  709,  710,  711,  712,
      714,  715,  715,  715,  715,  715,  715,  715,  715,  715,
      715,  716,  717,  717,  717,  717,  717,  717,  717,  717,
      717,  717,  717,  717,  717,  717,  717,  718,  719,  719,
      719,  719,  719,  719,  719,  719,  719,  719,  719,  719,
      720,  721,  723,  724,  725,  727,  728,  729,  730,  731,
      732,  733,  734,  736,  737,  738,  740,  741,  742,  743,
      744,  745,  746,  747,  748,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  750,  750,  750,  750,  750,  750,  750,

      751,  752,  754,  755,  756,  758,  759,  760,  761,  762,
      763,  764,  765,  767,  768,  769,  771,  772,  773,  774,
      775,  776,  777,  778,  779,  780,  780,  780,  780,  780,
      780,  780,  781,  782,  784,  785,  786,  788,  789,  790,
      791,  792,  793,  794,  795,  797,  798,  799,  800,  801,
      801,  801,  801,  801,  801,  801,  802,  802,  802,  802,
      802,  802,  802,  802,  802,  802,  802,  802,  802,  802,
      802,  802,  803,  804,  806,  808,  809,  810,  811,  812,
      813,  814,  815,  816,  817,  819,  820,  821,  822,  823,
      824,  825,  826,  826,  826,  826,  826,  826,  826,  826,

      827,  828,  829,  831,  833,  834,  835,  836,  837,  838,
      839,  840,  841,  842,  844,  846,  848,  849,  850,  851,
      852,  853,  854,  855,  856,  857,  858,  860,  862,  863,
      864,  865,  866,  867,  868,  869,  870,  871,  873,  874,
      875,  875,  875,  875,  875,  875,  875,  875,  875,  875,
      875,  876,  877,  879,  880,  881,  882,  884,  886,  888,
      890,  891,  892,  893,  893,  893,  894,  895,  897,  898,
      899,  900,  902,  904,  906,  908,  910,  911,  912,  913,
      914,  915,  917,  918,  919,  920,  922,  924,  926,  928,
      928,  928,  928,  929,  930,  931,  932,  933,  934,  936,

      937,  938,  939,  940,  941,  943,  944,  945,  946,  947,
      948,  949,  950,  952,  953,  955,  956,  957,  959,  960,
      962,  963,  964,  966,  967,  969,  970,  972,  973,  975,
      977,  978,  980,  982,  983,  985,  986,  987,  988,  990,
      992,  994,  994
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    6,    5,    7,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    5,   25,    5,    5,    5,   26,   27,   28,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   29,    5,    5,    5,    5,    5,    5,
       30,   31,   32,   33,    5,    1,   34,   35,   36,   37,

       38,   39,   40,   41,   42,    5,   43,   44,   45,   46,
       47,    5,    5,   48,   49,   50,   51,    5,   52,    5,
       53,    5,   54,   55,   56,   57,    1,   58,   58,   58,
       58,   58,   58,   58,   58,   58,   58,   58,   58,   58,
       58,   58,   58,   59,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,   59,   59,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   61,   60,   60,   60,
       62,    1,    1,   63,   63,   63,   63,   63,   63,   63,

       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
       63,   63,   63,   64,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   66,   67,   68,   69,
       70,   70,   70,   71,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[72] =
    {   0,
        1,    2,    3,    4,    5,    6,    5,    7,    1,    6,
        8,    1,    9,    1,   10,    1,   11,    9,   12,    1,
       10,    8,    8,    8,    1,    5,    5,    5,    5,    1,
        1,    1,    1,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5
    } ;

static const flex_int16_t yy_base[975] =
    {   0,
        0,   71,  140,  145,  150,  155,  160,  166,  171,  173,
      178,  183,  201,    0,  271,  327,  384,    0, 1234, 4910,
      186,  276,  285,  244, 4910,  253,  428, 1214, 4910, 4910,
     4910,  178, 4910, 4910, 4910,  322,  180,  495, 4910, 4910,
      278,  143,  145,  169, 4910, 1201, 4910, 4910,  315,  318,
      330,  332,  430,  432,  434,  436,  477,  539,  542,  545,
     4910, 1160, 4910,  281,  314,  265,  449,  141,  491,  538,
      428,  543, 1140,  604,  552,  561,  674,  605,  608,  612,
      610,  649,  657,  651,  655,  681,  683,  686,  718,  690,
      457,  702,  226,  711,  716,  604,  721, 1133,    0, 4910,

     1184,  293,  460, 4910,    0, 4910, 1177,  462,  471, 4910,
        0, 4910, 1175, 1147, 1137,    0, 4910, 1145, 4910, 1107,
     4910, 1104,  349, 4910,  782,  554,  785,  762, 4910,  750,
      794, 1089, 4910, 4910, 4910,  559,  982, 4910,  968,  817,
      596,    0,  970, 4910,  502,  659,  695,  730, 4910,  940,
     4910, 4910, 4910,  898, 4910,  787,  779,  668,  793,  521,
      798,  802,  807,  888,    0,  942, 4910,  914, 4910, 4910,
        0, 4910,  365, 4910,    0,    0,    0,    0, 4910,  807,
      816,  860,  569,  863,  866,  904,  868,  906,  908,  932,
      934,  936,  938,  950,  964,  948,  694,  957,  535,  962,

      860,  967,  854,  763, 4910,  903,  966, 1028,  633, 1005,
      977,  743,  992,  584,  998,  880, 1003,  846,    0, 1008,
      747, 1013,  633, 1018,  935, 1023,  843, 1058, 1060, 4910,
     4910,    0, 4910,  811,  876,  873, 1074,  832, 4910, 4910,
        0, 4910, 1050, 1059, 1118,    0, 1138,  884, 1044,  785,
     1080,  658, 1085,  986, 1100,  773,  978, 4910, 4910,  809,
     4910,  981, 4910, 1130,    0, 1127, 1135, 1140, 1142, 1147,
     1171, 1185, 1188, 1200, 1202, 1204, 1219, 1227, 1231, 1236,
     1250, 1254, 4910, 1170, 1256, 1249, 1254, 1259, 1264, 1269,
     1274, 1279, 1284, 1345, 1290, 1299, 1313,  951, 1318,  736,

     1323, 1327, 1332,  771, 1194, 1367, 1339,  980, 1360,  767,
     1365, 1343, 1370,  739, 1405, 1375, 1030, 1380,  784, 1385,
     1389, 1394,  700, 1438, 1450, 1452, 1455, 1457, 1469, 1475,
     1481, 1484, 1488, 1500, 1504, 1512, 1516, 1519, 1528, 1543,
     1545, 1547, 1551, 1399, 1544, 1549, 1554, 1559, 1564, 1569,
     1574,    0, 4910, 4910, 4910, 4910, 4910,    0, 4910, 4910,
     4910, 4910, 4910,    0, 4910, 4910, 4910,    0, 4910,  724,
     4910, 4910, 4910, 1635, 4910, 4910,  288,  511,  706,  696,
      685, 1614, 1619,  672,  664,  635,  648,    0,  643, 4910,
        0,    0, 1628, 1601, 1034, 1612,  850, 1621, 1403, 1626,

      554, 1626, 1640, 1122, 1645,  890, 1650, 1654, 1659,  552,
     1694, 1696, 1698, 1701, 1703, 1721, 1726, 1729, 1733, 1745,
     1752, 1757, 1760, 1775, 1777, 1780, 1800, 1784, 1803, 1807,
     1800, 1805, 1810, 1815, 1820, 1825, 1830, 4910,  585, 1835,
     1840, 1845, 1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885,
     1890, 1895, 1900, 4910, 4910, 4910, 1283, 1545, 4910, 4910,
     1569, 1905, 1201, 1910, 1075, 1915, 1919, 1924,  527, 1924,
     1938, 1615, 1943, 1136, 1948, 1952, 1957,  499, 4910,  317,
      536, 2013,  501, 2078, 1964, 1969, 1975, 1980, 1985, 1990,
     1995, 4910, 2059, 2061, 2063, 2076, 2078, 2101, 2124, 2126,

     2128, 2130, 2132, 2156, 2158, 2160, 2163, 2165, 2172, 2222,
     2000, 2005, 2010, 2292, 2060, 1787, 2073, 1153, 2159, 2236,
     2241,  443, 2302, 2247, 1794, 2252, 1167, 2257, 2261, 2266,
      427, 2271, 2276, 2281, 2286, 2291, 2316, 2321, 4910, 2382,
     2327, 2340, 2349, 2354, 2359, 2364, 2369, 2374, 2379, 2384,
     2389, 2394, 2399, 2404, 2439, 2441, 2443, 2448, 2457, 2466,
     2471, 2473, 2486, 2480, 2498, 2500, 2503, 2505, 2517, 2529,
     2531, 2581, 2595, 2600, 2605,  379,  368,  339,  281,  262,
     2610, 2615, 2620, 2625, 2630, 2635, 2640, 2645, 2650, 2655,
     2660, 2665, 2670, 2675, 2710, 2712, 2714, 2719, 2728, 2737,

     2742, 2744, 2757, 2751, 2769, 2771, 2774, 2776, 2788, 2800,
     2802, 2795, 2800, 2805, 2810, 2815, 2820, 2825, 2830, 2835,
     2535, 2806, 2840, 2845, 2850, 2855, 2860, 2865, 2870, 2875,
     2880, 2885, 2890, 2895, 2900, 2905, 1580, 2905, 2919, 2013,
     2924, 1229, 2929, 2933, 2938,  218, 2943, 2948, 2953, 2988,
     2991, 2993, 2996, 3000, 3016, 3020, 3023, 3028, 3035, 3040,
     3053, 3055, 3058, 3071,    0,    0, 3053, 2063, 3058, 1232,
     3064, 3068, 3073,  136, 3108, 3080, 3090, 3095, 3101, 3106,
     3111, 3116, 3121, 3126, 3131, 3136, 3141, 3146, 3151, 3156,
     3161, 3166, 3227, 3172, 3185, 3194, 3199, 3204, 3209, 3244,

     3247, 3249, 3252, 3256, 3272, 3276, 3279, 3284, 3291, 3296,
     3309, 3311, 3314, 3327, 3360,    0, 3328, 2076, 3333, 1292,
     3338, 3084, 3343,  125, 3329, 3348, 3353, 3360, 3365, 3370,
     3375, 3410, 3413, 3415, 3418, 3422, 3438, 3442, 3445, 3450,
     3457, 3462, 3475, 3477, 3480, 3493, 3489, 3495, 3483, 3497,
     3502, 3507, 3512, 3517, 3522, 3522, 3536, 2330, 3541, 1533,
     3546, 3476, 3551,   94, 3556, 3561, 3566, 3571, 3576, 3581,
     3586, 1750, 3621, 3623, 3625, 3628, 3637, 3640, 3652, 3654,
     3660, 3668, 3672, 3680, 3684, 3666, 3677, 3682, 3687, 3692,
     3697, 3702, 3707, 3712, 3717, 3722, 3727, 3732,    0, 3767,

     3795, 3770, 3772, 3774, 3786, 3790, 3798, 3828, 3802, 3843,
     3840, 3845, 3848, 3863,    0, 2091, 3845, 3850, 3856, 3861,
     3866, 3871, 3876, 3911,    0, 3913, 3915, 3917, 3920, 3929,
     3943, 3945, 3947, 3952, 3972, 3975, 3978, 3981, 1778,    0,
     3974, 3979, 3984, 3989, 3994, 3999, 4004, 4009, 4014, 4019,
     4054, 4056, 4058, 4060, 4062, 4074, 4086, 4089, 4091, 4093,
     4086, 4091, 4096,    0,    0, 4131, 4133, 4135, 4137, 4139,
     4151, 4163, 4166, 4168, 4170, 3349, 4163, 4168, 4173, 4208,
     4210, 4212, 4214, 4216, 4228, 4240, 4243, 4245, 4247, 4240,
     4245, 4250, 1801, 4285, 4287, 4289, 4292, 4294,    0, 4301,

     4317, 4319, 4324, 4332,    0, 4336, 4349, 4344, 4351, 4356,
        0, 4363, 4375, 4379, 4381, 4388, 4394, 4406, 4408, 4412,
     4425, 4420, 4432, 4437, 4439, 4445, 4452, 4457, 4464, 4469,
     4471, 4477, 4483, 4495, 4497, 4500, 4502, 4515, 4527, 4529,
     4531, 4910, 4581, 4593, 4605, 4617, 4629, 4641, 4649, 4657,
     4668, 4674, 4682, 4694, 4706, 4718, 4730, 4742, 4750, 4758,
     4770, 4781, 4788, 4796, 4808, 4818, 4826, 4838, 4846, 4854,
     4866, 4878, 4886, 4897
    } ;

static const flex_int16_t yy_def[975] =
    {   0,
      942,  942,  943,  943,  944,  944,  945,  945,  946,  946,
      947,  947,  942,   13,  948,  948,  942,   17,  942,  942,
      942,  942,  942,  949,  942,  950,  949,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  951,  952,  953,  952,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  954,  942,

      942,  942,  942,  942,  955,  942,  942,  942,  942,  942,
      956,  942,  942,  942,  942,  957,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,   27,  942,  950,
       27,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,   38,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  958,  942,  942,  942,  942,  942,
      958,  942,  958,  942,  958,  958,  958,  958,  942,  959,
      960,  959,  942,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  942,  942,  942,  942,  942,

      942,  942,  942,  942,  942,  942,  942,  942,  942,   27,
      942,  942,  942,  942,  942,  942,  942,  942,  130,  942,
      942,  942,  942,  942,  942,  942,  942,   27,   27,  942,
      942,  961,  942,  942,  942,  942,  942,  942,  942,  942,
      962,  942,  963,  964,   38,   38,  963,  247,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  965,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,  942,  942,   27,  942,  942,  942,  942,  942,
      942,  942,  942,  951,  966,  967,  942,  942,  942,  942,

      942,  942,  942,  942,  968,   77,  942,  942,  942,  942,
      942,  942,  942,  942,  953,  942,  942,  942,  942,  942,
      942,  942,  942,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,  942,  942,  942,  942,  942,  942,  942,
      942,  954,  942,  942,  942,  942,  942,  955,  942,  942,
      942,  942,  942,  956,  942,  942,  942,  957,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,   27,   27,  942,  942,  942,  942,  958,  942,  942,
      958,  958,  182,  942,  942,  942,  942,  942,  942,  942,

      942,  960,  942,  942,  942,  942,  942,  942,  942,  942,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      247,  942,  942,  942,  942,  942,  942,  942,  942,  964,
      942,  942,  942,  942,  942,  942,  942,  942,  942,   38,
      942,  969,  942,  969,  942,  942,  942,  942,  942,  942,
      942,  942,   27,   27,   27,   27,   27,   27,   27,   27,

       27,   27,   27,   27,   27,   27,   27,   27,   27,  942,
      942,  942,  942,  966,  942,  942,  942,  942,  942,  942,
      942,  942,  967,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  968,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  182,  182,  182,  182,  182,  182,

      182,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  942,  942,  942,  942,  942,  942,  942,  942,  942,
       38,   38,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  247,  970,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,   27,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,  971,  510,  971,  971,  971,  971,
      971,  971,  971,  971,   27,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  968,  942,  942,  942,  942,  942,  942,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  972,  572,  971,  971,  971,  971,
      971,  971,  971,  971,   77,  942,  942,  942,  942,  942,
      942,  182,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,   27,  973,  942,
      942,  942,  942,  942,  942,  970,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  247,   27,   27,   27,   27,   27,   27,   27,   27,
       27,   27,   27,   27,   27,  971,  971,  971,  971,  971,
      971,  971,  942,  942,  942,  942,  942,  942,  514,   77,

      974,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,  971,  972,  971,  971,  971,  971,
      971,  971,  971,  182,  402,  182,  182,  182,  182,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  247,  470,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   27,
      971,  971,  971,  514,  523,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,  972,  971,  971,  971,  182,
      182,  182,  182,  182,  182,  182,  182,  182,  182,  942,
      942,  942,  247,   27,   27,   27,   27,   27,  510,   77,

       77,   77,   77,   77,  572,  182,  182,  182,  182,  182,
      756,   27,   27,   27,   27,   27,   77,   77,   77,   77,
       77,  182,  182,  182,  182,  182,   27,   27,   27,   77,
       77,   77,  182,  182,  182,   27,   77,  182,   27,   77,
      182,    0,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942
    } ;

static const flex_int16_t yy_nxt[4982] =
    {   0,
       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
       30,   31,   32,   33,   34,   35,   36,   37,   38,   39,
       40,   41,   42,   43,   44,   24,   24,   24,   24,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   24,
       24,   55,   24,   24,   24,   24,   56,   57,   58,   59,
       24,   60,   24,   61,   62,   63,   64,   20,   20,   20,
       20,   20,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   20,   74,   22,   23,   75,   25,   76,   77,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   75,   75,   75,   75,

       45,   46,   47,   48,   78,   79,   80,   81,   82,   83,
       75,   75,   84,   75,   75,   75,   75,   85,   86,   87,
       88,   75,   89,   75,   61,   62,   63,   64,   20,   20,
       20,   20,   20,   90,   91,   92,   93,   94,   95,   96,
       97,   98,  100,  101,  260,  102,  262,  100,  101,  103,
      102,  847,  106,  107,  103,  108,  104,  106,  107,  109,
      108,  104,  112,  113,  109,  261,  110,  263,  112,  113,
      264,  110,  114,  117,  118,  117,  118,  115,  114,  120,
      121,  122,  823,  115,  120,  121,  122,  204,  205,  206,
      231,  259,  240,  792,  232,  123,  241,  242,  288,  288,

      123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
      133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
      143,  144,  145,  146,  147,  148,  128,  128,  128,  128,
      149,  150,  151,  152,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  128,  128,  128,  128,
      128,  128,  128,  128,  153,  154,  155,  156,  124,  124,
      124,  124,  124,  157,  158,  159,  160,  161,  161,  162,
      163,  164,  166,  167,  168,  771,  169,  207,  580,  257,
      170,  171,  284,  346,  346,  172,  207,  209,  173,  576,
      208,  174,  175,  176,  177,  178,  208,  579,  354,  208,

      258,  259,  355,  259,  384,  208,  211,  212,  213,  214,
      215,  215,  216,  217,  218,  220,  221,  222,  223,  224,
      224,  225,  226,  227,  286,  286,  286,  178,  166,  167,
      168,  233,  169,  942,  234,  480,  170,  171,  235,  236,
      237,  172,  210,  210,  173,  210,  210,  174,  175,  176,
      177,  178,  238,  210,  239,  578,  210,  210,  210,  210,
      210,  372,  266,  268,  210,  267,  373,  210,  210,  577,
      210,  285,  285,  285,  285,  285,  269,  391,  270,  210,
      576,  210,  392,  178,  179,  179,  179,  179,  180,  179,
      181,  182,  179,  179,  179,  179,  179,  179,  179,  179,

      179,  183,  179,  179,  179,  179,  179,  179,  179,  180,
      180,  180,  180,  179,  179,  179,  179,  184,  185,  186,
      187,  188,  189,  180,  180,  190,  180,  180,  180,  180,
      191,  192,  193,  194,  180,  195,  180,  179,  179,  179,
      179,  179,  179,  179,  179,  179,  196,  197,  198,  199,
      200,  200,  201,  202,  203,  228,  229,  210,  210,  210,
      210,  210,  210,  210,  210,  356,  228,  360,  210,  357,
      210,  361,  275,  271,  210,  272,  362,  229,  273,  210,
      363,  210,  274,  210,  689,  276,  291,  291,  291,  291,
      211,  212,  213,  214,  215,  215,  216,  217,  218,  243,

      682,  244,  243,  257,  210,  210,  287,  287,  287,  287,
      287,  245,  577,  246,  277,  210,  344,  344,  344,  622,
      247,  248,  243,  243,  258,  259,  210,  385,  243,  243,
      243,  247,  248,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  243,  243,  243,  243,  243,  243,  289,  289,
      289,  289,  289,  305,  621,  207,  636,  249,  250,  251,
      252,  253,  253,  254,  255,  256,  210,  210,  208,  210,
      210,  231,  210,  210,  208,  232,  278,  210,  288,  288,
      210,  240,  280,  210,  629,  282,  242,  438,  210,  281,
      279,  210,  433,  433,  210,  289,  289,  289,  290,  289,

      292,  292,  292,  292,  292,  294,  205,  206,  240,  594,
      296,  587,  241,  242,  307,  308,  309,  310,  311,  311,
      312,  313,  314,  316,  317,  318,  319,  320,  320,  321,
      322,  323,  306,  306,  207,  306,  306,  306,  306,  306,
      306,  442,  442,  306,  389,  328,  306,  208,  306,  387,
      306,  386,  326,  208,  306,  327,  330,  306,  329,  306,
      260,  306,  349,  349,  349,  349,  297,  298,  299,  300,
      301,  301,  302,  303,  304,  305,  306,  306,  306,  306,
      580,  261,  306,  306,  306,  306,  207,  306,  579,  335,
      449,  449,  331,  306,  332,  306,  262,  387,  306,  208,

      306,  324,  325,  333,  336,  208,  306,  334,  306,  306,
      306,  306,  324,  306,  306,  487,  487,  263,  337,  306,
      338,  306,  578,  325,  306,  370,  340,  286,  286,  286,
      306,  264,  306,  341,  339,  306,  307,  308,  309,  310,
      311,  311,  312,  313,  314,  306,  306,  343,  343,  343,
      343,  343,  259,  431,  431,  431,  306,  554,  342,  345,
      345,  345,  345,  345,  204,  205,  206,  306,  347,  347,
      347,  347,  347,  347,  347,  347,  348,  347,  350,  350,
      350,  350,  350,  374,  205,  206,  207,  381,  284,  210,
      210,  375,  376,  534,  534,  377,  547,  378,  379,  208,

      210,  380,  440,  440,  440,  208,  447,  447,  447,  259,
      260,  210,  220,  221,  222,  223,  224,  224,  225,  226,
      227,  382,  383,  239,  543,  543,  233,  455,  538,  234,
      491,  261,  382,  386,  236,  237,  285,  285,  285,  285,
      285,  550,  550,  383,  485,  485,  485,  238,  459,  239,
      287,  287,  287,  287,  287,  289,  289,  289,  289,  289,
      291,  291,  291,  291,  292,  292,  292,  292,  292,  394,
      395,  396,  397,  398,  398,  399,  400,  401,  403,  404,
      405,  406,  407,  407,  408,  409,  410,  411,  412,  456,
      393,  393,  235,  393,  393,  393,  393,  483,  411,  483,

      453,  393,  484,  446,  393,  205,  393,  583,  583,  412,
      413,  437,  393,  414,  417,  393,  390,  393,  435,  435,
      435,  435,  394,  395,  396,  397,  398,  398,  399,  400,
      401,  393,  393,  393,  393,  393,  393,  415,  444,  444,
      444,  444,  393,  389,  393,  293,  393,  590,  590,  418,
      416,  419,  283,  393,  420,  393,  265,  393,  421,  393,
      393,  393,  393,  393,  393,  393,  393,  207,  438,  439,
      422,  387,  393,  424,  393,  425,  393,  393,  393,  257,
      208,  393,  262,  423,  385,  393,  208,  393,  393,  426,
      427,  393,  393,  451,  451,  451,  451,  428,  384,  393,

      258,  259,  393,  263,  429,  430,  430,  430,  430,  430,
      532,  532,  532,  393,  432,  432,  432,  432,  432,  434,
      434,  434,  434,  434,  436,  436,  436,  436,  436,  207,
      438,  439,  210,  210,  210,  210,  210,  210,  210,  541,
      541,  541,  208,  210,  489,  489,  489,  489,  208,  441,
      441,  441,  441,  441,  210,  443,  443,  443,  443,  443,
      445,  445,  445,  445,  445,  219,  219,  219,  219,  219,
      448,  448,  448,  448,  448,  450,  450,  450,  450,  450,
      452,  452,  452,  452,  452,  210,  210,  210,  210,  548,
      548,  548,  237,  581,  581,  581,  210,  230,  210,  457,

      458,  243,  243,  243,  243,  243,  371,  210,  370,  210,
      457,  458,  462,  463,  464,  465,  466,  466,  467,  468,
      469,  471,  472,  473,  474,  475,  475,  476,  477,  478,
      479,  264,  625,  625,  942,  479,  480,  486,  486,  486,
      486,  486,  488,  488,  488,  488,  488,  369,  479,  367,
      479,  481,  259,  481,  210,  210,  482,  490,  490,  490,
      490,  490,  210,  210,  366,  210,  493,  210,  210,  210,
      210,  284,  494,  210,  210,  210,  210,  365,  210,  359,
      210,  588,  588,  588,  210,  210,  353,  497,  495,  496,
      351,  210,  259,  632,  632,  305,  210,  293,  210,  210,

      462,  463,  464,  465,  466,  466,  467,  468,  469,  210,
      678,  678,  210,  210,  283,  210,  210,  265,  540,  498,
      210,  499,  230,  210,  685,  685,  210,  210,  210,  210,
      210,  210,  210,  942,  210,  500,  942,  210,  210,  942,
      210,  942,  210,  942,  502,  501,  210,  210,  942,  210,
      540,  210,  942,  210,  210,  210,  942,  210,  210,  210,
      623,  623,  623,  210,  210,  210,  942,  503,  504,  210,
      505,  942,  506,  507,  210,  942,  210,  210,  210,  942,
      210,  210,  210,  210,  210,  210,  767,  767,  210,  788,
      788,  305,  210,  942,  210,  509,  481,  942,  481,  210,

      942,  621,  508,  210,  942,  210,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      285,  285,  285,  285,  285,  285,  285,  285,  285,  285,
      510,  511,  511,  511,  511,  511,  512,  512,  512,  512,
      512,  513,  513,  513,  513,  513,  294,  205,  206,  819,
      819,  296,  515,  516,  517,  518,  519,  519,  520,  521,
      522,  524,  525,  526,  527,  528,  528,  529,  530,  531,
      295,  295,  295,  295,  295,  533,  533,  533,  533,  533,
      535,  535,  535,  535,  535,  536,  536,  536,  536,  537,
      537,  537,  537,  537,  306,  306,  306,  306,  306,  306,

      306,  545,  545,  545,  545,  306,  305,  297,  298,  299,
      300,  301,  301,  302,  303,  304,  306,  542,  542,  542,
      542,  542,  544,  544,  544,  544,  544,  546,  546,  546,
      546,  546,  315,  315,  315,  315,  315,  549,  549,  549,
      549,  549,  551,  551,  551,  551,  551,  552,  552,  552,
      552,  553,  553,  553,  553,  553,  343,  343,  343,  343,
      343,  585,  585,  585,  585,  306,  306,  316,  317,  318,
      319,  320,  320,  321,  322,  323,  306,  306,  306,  306,
      306,  942,  306,  306,  306,  306,  942,  306,  306,  942,
      306,  555,  556,  306,  942,  306,  306,  306,  942,  306,

      942,  306,  306,  306,  306,  557,  558,  306,  306,  306,
      942,  306,  306,  306,  559,  306,  306,  942,  306,  306,
      561,  942,  306,  942,  306,  942,  306,  306,  306,  560,
      306,  306,  306,  306,  942,  562,  942,  306,  306,  306,
      306,  942,  306,  306,  306,  563,  306,  306,  942,  306,
      306,  942,  564,  306,  306,  306,  306,  306,  483,  942,
      483,  306,  567,  622,  565,  566,  306,  942,  306,  568,
      306,  306,  306,  306,  306,  306,  942,  306,  306,  306,
      569,  306,  942,  306,  942,  306,  942,  461,  571,  306,
      843,  843,  306,  942,  306,  942,  306,  570,  461,  942,

      306,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      343,  343,  343,  343,  343,  343,  343,  343,  343,  343,
      572,  573,  573,  573,  573,  573,  574,  574,  574,  574,
      574,  575,  575,  575,  575,  575,  374,  205,  206,  942,
      942,  210,  210,  942,  375,  376,  210,  210,  377,  942,
      378,  379,  210,  942,  380,  393,  393,  210,  393,  393,
      393,  393,  393,  210,  942,  942,  393,  942,  210,  582,
      582,  582,  582,  582,  630,  630,  630,  393,  584,  584,
      584,  584,  584,  586,  586,  586,  586,  586,  403,  404,
      405,  406,  407,  407,  408,  409,  410,  402,  402,  402,

      402,  402,  589,  589,  589,  589,  589,  591,  591,  591,
      591,  591,  592,  592,  592,  592,  593,  593,  593,  593,
      593,  393,  393,  393,  393,  393,  393,  942,  393,  393,
      393,  393,  393,  942,  393,  942,  393,  595,  596,  393,
      942,  393,  942,  393,  942,  393,  942,  393,  393,  393,
      393,  597,  598,  393,  393,  942,  393,  393,  942,  393,
      393,  393,  942,  942,  393,  942,  599,  393,  461,  601,
      393,  393,  393,  393,  942,  393,  942,  600,  393,  393,
      393,  942,  393,  393,  393,  393,  942,  393,  393,  942,
      393,  942,  602,  942,  393,  393,  461,  603,  393,  942,

      604,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      942,  393,  393,  393,  942,  393,  942,  942,  393,  461,
      607,  608,  393,  605,  606,  942,  393,  393,  393,  393,
      393,  393,  942,  393,  393,  393,  610,  609,  393,  942,
      942,  393,  942,  942,  611,  393,  676,  676,  676,  393,
      942,  942,  393,  683,  683,  683,  393,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  430,  430,  430,
      430,  430,  430,  430,  430,  430,  430,  612,  612,  612,
      612,  612,  613,  613,  613,  613,  613,  614,  614,  614,
      614,  614,  210,  210,  210,  210,  210,  210,  210,  210,

      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  210,  615,  615,  615,  615,  615,  616,  616,  616,
      616,  616,  617,  617,  617,  617,  617,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  219,  219,  219,
      219,  219,  219,  219,  219,  219,  219,  618,  618,  618,
      618,  618,  619,  619,  619,  619,  619,  620,  620,  620,
      620,  620,  461,  461,  461,  461,  461,  624,  624,  624,
      624,  624,  626,  626,  626,  626,  626,  627,  627,  627,
      627,  628,  628,  628,  628,  628,  471,  472,  473,  474,
      475,  475,  476,  477,  478,  470,  470,  470,  470,  470,

      631,  631,  631,  631,  631,  633,  633,  633,  633,  633,
      634,  634,  634,  634,  635,  635,  635,  635,  635,  638,
      243,  243,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  482,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  243,  647,  647,  647,  647,  647,  648,  648,  648,
      648,  648,  649,  649,  649,  649,  649,  675,  675,  675,
      675,  675,  675,  675,  675,  675,  675,  675,  675,  675,
      675,  675,  765,  765,  765,  639,  640,  641,  642,  643,
      643,  644,  645,  646,  638,  243,  210,  210,  210,  210,
      210,  210,  876,  539,  651,  942,  484,  210,  942,  210,

      652,  210,  942,  210,  210,  210,  210,  942,  210,  650,
      210,  653,  210,  665,  210,  942,  210,  514,  514,  514,
      514,  514,  786,  786,  786,  210,  942,  654,  210,  210,
      677,  677,  677,  677,  677,  817,  817,  817,  655,  210,
      639,  640,  641,  642,  643,  643,  644,  645,  646,  942,
      210,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  942,  656,  657,  210,  942,  210,  658,  210,  942,
      210,  942,  942,  210,  942,  210,  942,  210,  942,  210,
      942,  210,  659,  210,  210,  210,  210,  210,  210,  942,
      210,  210,  210,  210,  210,  661,  210,  942,  210,  210,

      210,  210,  942,  210,  942,  210,  660,  210,  663,  662,
      210,  942,  210,  942,  210,  664,  679,  679,  679,  679,
      679,  210,  665,  665,  942,  665,  666,  665,  666,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  665,
      666,  665,  665,  665,  665,  665,  665,  666,  666,  666,
      666,  665,  665,  665,  665,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  665,  665,  665,  665,  665,
      665,  665,  665,  665,  667,  668,  669,  670,  671,  671,
      672,  673,  674,  305,  680,  680,  680,  680,  681,  681,

      681,  681,  681,  305,  523,  523,  523,  523,  523,  684,
      684,  684,  684,  684,  686,  686,  686,  686,  686,  687,
      687,  687,  687,  688,  688,  688,  688,  688,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  295,  295,  295,  295,  295,  295,  295,  690,  690,
      690,  690,  690,  942,  515,  516,  517,  518,  519,  519,
      520,  521,  522,  942,  524,  525,  526,  527,  528,  528,
      529,  530,  531,  691,  691,  691,  691,  691,  692,  692,
      692,  692,  692,  693,  306,  306,  306,  306,  306,  841,
      841,  841,  539,  942,  942,  942,  539,  306,  306,  306,

      306,  306,  539,  539,  942,  539,  306,  306,  306,  306,
      306,  306,  306,  306,  306,  306,  694,  694,  694,  694,
      694,  695,  695,  695,  695,  695,  696,  696,  696,  696,
      696,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  315,  315,  315,  315,
      315,  697,  697,  697,  697,  697,  698,  698,  698,  698,
      698,  699,  699,  699,  699,  699,  306,  306,  306,  306,
      306,  306,  942,  942,  701,  306,  306,  306,  942,  306,
      702,  306,  942,  703,  306,  306,  306,  942,  306,  700,
      306,  942,  306,  306,  306,  306,  942,  306,  306,  306,

      306,  306,  942,  705,  306,  942,  704,  306,  306,  706,
      942,  306,  942,  306,  306,  306,  942,  708,  306,  942,
      306,  707,  306,  942,  306,  306,  306,  306,  306,  306,
      306,  306,  306,  306,  942,  306,  306,  942,  306,  942,
      711,  306,  942,  306,  306,  306,  942,  306,  709,  306,
      710,  942,  306,  621,  712,  306,  306,  306,  306,  306,
      243,  243,  713,  942,  942,  942,  306,  306,  942,  306,
      942,  243,  243,  942,  714,  942,  942,  942,  306,  942,
      306,  665,  715,  942,  665,  716,  665,  716,  665,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  665,  716,

      665,  665,  665,  665,  665,  665,  716,  716,  716,  716,
      665,  665,  665,  665,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  716,  665,  665,  665,  665,  665,  665,
      665,  665,  665,  717,  718,  719,  720,  721,  721,  722,
      723,  724,  725,  725,  725,  725,  725,  725,  725,  725,
      725,  725,  725,  725,  725,  725,  725,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  393,  393,  726,  726,  726,
      726,  726,  727,  727,  727,  727,  727,  728,  728,  728,

      728,  728,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  402,  402,  402,
      402,  402,  729,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  731,  731,  731,  731,  731,  393,  393,  393,
      393,  393,  393,  942,  942,  733,  393,  393,  393,  942,
      393,  734,  393,  942,  735,  393,  393,  393,  942,  393,
      732,  393,  942,  393,  393,  393,  393,  942,  393,  393,
      393,  393,  393,  942,  737,  393,  942,  736,  393,  393,
      738,  942,  393,  942,  393,  393,  393,  942,  740,  393,
      942,  393,  739,  393,  942,  393,  393,  393,  393,  393,

      393,  393,  393,  393,  393,  942,  393,  393,  942,  393,
      942,  743,  393,  942,  393,  393,  393,  942,  393,  741,
      393,  742,  942,  393,  622,  744,  393,  393,  393,  393,
      393,  243,  243,  745,  942,  942,  942,  393,  393,  942,
      393,  942,  243,  243,  942,  746,  942,  942,  942,  393,
      942,  393,  747,  747,  747,  747,  747,  747,  747,  747,
      747,  747,  747,  747,  747,  747,  747,  748,  748,  748,
      748,  748,  748,  748,  748,  748,  748,  748,  748,  748,
      748,  748,  749,  749,  749,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  749,  749,  749,  461,  461,  461,

      461,  461,  461,  461,  461,  461,  461,  461,  461,  461,
      461,  461,  461,  461,  461,  461,  461,  750,  750,  750,
      750,  750,  751,  751,  751,  751,  751,  752,  752,  752,
      752,  752,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  470,  470,  470,  470,  470,
      470,  470,  753,  753,  753,  753,  753,  754,  754,  754,
      754,  754,  755,  755,  755,  755,  755,  757,  758,  759,
      760,  761,  761,  762,  763,  764,  637,  637,  637,  637,
      637,  766,  766,  766,  766,  766,  768,  768,  768,  768,
      768,  769,  769,  769,  769,  770,  770,  770,  770,  770,

      772,  772,  772,  772,  772,  772,  772,  772,  772,  772,
      772,  772,  772,  772,  772,  210,  210,  942,  210,  210,
      210,  210,  942,  210,  210,  942,  210,  210,  210,  210,
      942,  210,  773,  774,  210,  942,  775,  210,  210,  942,
      210,  776,  210,  210,  210,  210,  942,  210,  210,  210,
      210,  210,  942,  942,  210,  210,  210,  777,  210,  942,
      942,  210,  210,  210,  942,  210,  210,  210,  210,  210,
      778,  942,  779,  210,  942,  780,  942,  210,  210,  781,
      210,  210,  210,  210,  210,  210,  210,  782,  783,  210,
      784,  210,  942,  210,  942,  942,  210,  942,  210,  210,

      942,  942,  210,  942,  210,  942,  942,  210,  785,  210,
      666,  666,  666,  666,  666,  787,  787,  787,  787,  787,
      210,  789,  789,  789,  789,  789,  790,  790,  790,  790,
      791,  791,  791,  791,  791,  210,  210,  514,  514,  514,
      514,  514,  821,  821,  821,  821,  210,  514,  514,  514,
      514,  514,  514,  514,  514,  514,  514,  210,  514,  514,
      514,  514,  514,  793,  793,  793,  793,  793,  794,  794,
      794,  794,  794,  795,  795,  795,  795,  795,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  796,  796,

      796,  796,  796,  797,  797,  797,  797,  797,  798,  798,
      798,  798,  798,  799,  799,  799,  799,  799,  799,  799,
      799,  799,  799,  799,  799,  799,  799,  799,  693,  800,
      800,  800,  800,  800,  942,  942,  942,  539,  942,  942,
      942,  539,  800,  800,  800,  800,  800,  539,  539,  942,
      539,  800,  800,  800,  800,  800,  801,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  801,  801,  801,  801,
      801,  306,  306,  942,  306,  306,  306,  306,  942,  306,
      306,  942,  306,  306,  306,  306,  942,  306,  802,  803,
      306,  942,  804,  306,  306,  942,  306,  805,  306,  306,

      306,  306,  942,  306,  306,  306,  306,  306,  942,  942,
      306,  306,  306,  806,  306,  942,  942,  306,  306,  306,
      942,  306,  306,  306,  306,  306,  807,  942,  808,  306,
      942,  809,  942,  306,  306,  810,  306,  306,  306,  306,
      306,  306,  306,  811,  812,  306,  813,  306,  942,  306,
      876,  539,  306,  942,  306,  306,  306,  306,  306,  942,
      306,  715,  539,  306,  814,  306,  942,  306,  942,  942,
      665,  665,  942,  942,  665,  942,  306,  942,  306,  942,
      665,  665,  665,  665,  816,  716,  716,  716,  716,  716,
      818,  818,  818,  818,  818,  820,  820,  820,  820,  820,

      822,  822,  822,  822,  822,  824,  824,  824,  824,  824,
      824,  824,  824,  824,  824,  942,  816,  824,  824,  824,
      824,  824,  825,  825,  825,  825,  825,  825,  825,  825,
      825,  825,  825,  825,  825,  825,  825,  393,  393,  942,
      393,  393,  393,  393,  942,  393,  393,  942,  393,  393,
      393,  393,  942,  393,  826,  827,  393,  942,  828,  393,
      393,  942,  393,  829,  393,  393,  393,  393,  942,  393,
      393,  393,  393,  393,  942,  942,  393,  393,  393,  830,
      393,  942,  942,  393,  393,  393,  942,  393,  393,  393,
      393,  393,  831,  942,  832,  393,  942,  833,  942,  393,

      393,  834,  393,  393,  393,  393,  393,  393,  393,  835,
      836,  393,  837,  393,  942,  393,  393,  393,  393,  942,
      393,  393,  210,  210,  393,  942,  393,  393,  942,  393,
      838,  393,  942,  210,  845,  845,  845,  845,  393,  942,
      942,  942,  393,  942,  210,  220,  221,  222,  223,  224,
      224,  225,  226,  227,  839,  839,  839,  839,  839,  839,
      839,  839,  839,  839,  839,  839,  839,  839,  839,  840,
      840,  840,  840,  840,  840,  840,  840,  840,  840,  840,
      840,  840,  840,  840,  757,  758,  759,  760,  761,  761,
      762,  763,  764,  756,  756,  756,  756,  756,  842,  842,

      842,  842,  842,  844,  844,  844,  844,  844,  846,  846,
      846,  846,  846,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  637,  637,  637,  637,  637,  637,  637,
      637,  637,  637,  848,  848,  848,  848,  848,  849,  849,
      849,  849,  849,  850,  850,  850,  850,  850,  210,  210,
      210,  210,  210,  210,  942,  210,  210,  942,  851,  210,
      942,  210,  942,  210,  210,  210,  210,  210,  210,  942,
      210,  942,  210,  852,  210,  853,  942,  210,  210,  210,
      210,  210,  210,  942,  942,  854,  210,  210,  210,  210,
      210,  942,  210,  855,  942,  210,  210,  857,  210,  210,

      210,  210,  942,  210,  942,  856,  210,  210,  210,  210,
      210,  210,  210,  858,  942,  942,  942,  210,  210,  942,
      860,  859,  210,  666,  666,  666,  666,  666,  942,  210,
      942,  942,  942,  210,  666,  666,  666,  666,  666,  666,
      666,  666,  666,  666,  666,  666,  666,  666,  666,  861,
      861,  861,  861,  861,  862,  862,  862,  862,  862,  863,
      863,  863,  863,  863,  864,  864,  864,  864,  864,  864,
      864,  864,  864,  864,  864,  864,  864,  864,  864,  865,
      865,  865,  865,  865,  865,  865,  865,  865,  865,  865,
      865,  865,  865,  865,  306,  306,  305,  306,  306,  306,

      306,  306,  306,  942,  942,  306,  942,  866,  306,  942,
      306,  942,  306,  306,  306,  942,  306,  306,  306,  306,
      942,  306,  942,  306,  306,  306,  306,  942,  868,  306,
      306,  867,  942,  942,  942,  306,  306,  942,  942,  306,
      306,  942,  942,  869,  942,  942,  942,  306,  942,  942,
      942,  306,  942,  871,  942,  306,  306,  316,  317,  318,
      319,  320,  320,  321,  322,  323,  306,  306,  306,  870,
      306,  306,  306,  306,  942,  306,  306,  306,  306,  942,
      872,  306,  942,  306,  942,  873,  306,  942,  875,  306,
      306,  306,  306,  942,  874,  942,  942,  306,  942,  942,

      942,  306,  716,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  306,  716,  716,  716,  716,  716,  716,  716,
      716,  716,  716,  877,  877,  877,  877,  877,  878,  878,
      878,  878,  878,  879,  879,  879,  879,  879,  393,  393,
      393,  393,  393,  393,  393,  393,  942,  393,  393,  393,
      880,  393,  942,  393,  942,  393,  393,  393,  393,  942,
      393,  942,  393,  942,  393,  881,  393,  882,  942,  393,
      393,  393,  393,  393,  393,  393,  942,  942,  393,  393,
      393,  393,  942,  393,  942,  393,  884,  942,  883,  886,
      393,  942,  393,  942,  393,  942,  393,  942,  885,  393,

      393,  393,  393,  393,  942,  393,  393,  942,  393,  393,
      393,  942,  942,  393,  942,  942,  393,  887,  889,  393,
      942,  393,  942,  942,  888,  942,  942,  393,  942,  942,
      393,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  756,  756,  756,  756,  756,  756,  756,
      756,  890,  890,  890,  890,  890,  891,  891,  891,  891,
      891,  892,  892,  892,  892,  892,  893,  893,  893,  893,
      893,  893,  893,  893,  893,  893,  893,  893,  893,  893,
      893,  210,  210,  210,  210,  210,  210,  210,  210,  210,
      210,  942,  210,  942,  210,  896,  210,  942,  210,  894,

      210,  210,  210,  210,  942,  210,  895,  210,  897,  210,
      942,  210,  210,  210,  210,  898,  210,  210,  210,  210,
      210,  210,  942,  210,  210,  942,  942,  210,  942,  210,
      942,  210,  942,  942,  942,  210,  942,  942,  210,  942,
      210,  942,  210,  899,  899,  899,  899,  899,  899,  899,
      899,  899,  899,  899,  899,  899,  899,  899,  306,  306,
      306,  306,  306,  306,  306,  306,  306,  306,  942,  306,
      942,  306,  902,  306,  942,  306,  900,  306,  306,  306,
      306,  942,  306,  901,  306,  903,  306,  942,  306,  306,
      306,  306,  904,  306,  306,  306,  306,  306,  306,  942,

      306,  306,  942,  942,  306,  942,  306,  942,  306,  942,
      942,  942,  306,  942,  942,  306,  942,  306,  942,  306,
      905,  905,  905,  905,  905,  905,  905,  905,  905,  905,
      905,  905,  905,  905,  905,  393,  393,  393,  393,  393,
      393,  393,  393,  393,  393,  942,  393,  942,  393,  908,
      393,  942,  393,  906,  393,  393,  393,  393,  942,  393,
      907,  393,  909,  393,  942,  393,  393,  393,  393,  910,
      393,  393,  393,  393,  393,  393,  942,  393,  393,  942,
      942,  393,  942,  393,  942,  393,  942,  942,  942,  393,
      942,  942,  393,  942,  393,  942,  393,  911,  911,  911,

      911,  911,  911,  911,  911,  911,  911,  911,  911,  911,
      911,  911,  210,  210,  210,  210,  210,  210,  942,  210,
      210,  210,  210,  210,  913,  210,  942,  210,  306,  306,
      210,  942,  210,  942,  912,  942,  210,  915,  914,  306,
      942,  210,  916,  210,  306,  306,  306,  306,  942,  942,
      917,  306,  306,  942,  918,  306,  942,  306,  942,  306,
      306,  942,  306,  393,  393,  942,  306,  942,  919,  920,
      306,  393,  393,  306,  393,  942,  393,  393,  393,  393,
      921,  306,  393,  393,  393,  922,  923,  393,  942,  393,
      210,  210,  942,  924,  393,  942,  925,  942,  393,  942,

      393,  210,  210,  210,  926,  393,  210,  210,  210,  210,
      942,  927,  210,  210,  942,  210,  210,  210,  942,  210,
      928,  306,  306,  942,  210,  929,  210,  942,  210,  942,
      210,  942,  306,  306,  306,  306,  306,  210,  942,  306,
      306,  942,  930,  306,  306,  942,  306,  393,  393,  931,
      306,  942,  306,  306,  942,  306,  942,  306,  393,  393,
      393,  306,  932,  306,  393,  393,  393,  393,  933,  393,
      393,  942,  393,  393,  306,  393,  942,  393,  934,  210,
      210,  393,  935,  393,  210,  210,  393,  942,  393,  942,
      210,  210,  210,  942,  393,  210,  306,  306,  306,  306,

      942,  210,  210,  936,  306,  306,  210,  306,  942,  306,
      393,  393,  942,  210,  942,  306,  942,  937,  306,  942,
      306,  393,  393,  393,  393,  393,  306,  210,  210,  306,
      306,  942,  393,  393,  942,  393,  942,  942,  210,  942,
      306,  938,  393,  393,  393,  939,  393,  940,  942,  210,
      942,  306,  942,  393,  210,  210,  306,  306,  393,  393,
      941,  942,  942,  942,  393,  210,  942,  306,  942,  393,
      942,  942,  942,  942,  942,  942,  210,  942,  306,  942,
      393,   99,   99,   99,   99,   99,   99,   99,   99,   99,
       99,   99,   99,  105,  105,  105,  105,  105,  105,  105,

      105,  105,  105,  105,  105,  111,  111,  111,  111,  111,
      111,  111,  111,  111,  111,  111,  111,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  116,  119,
      119,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  165,  165,  165,  165,  165,  165,  165,  165,  165,
      165,  165,  165,  210,  942,  942,  942,  942,  942,  942,
      210,  219,  942,  942,  942,  942,  942,  942,  219,  295,
      295,  295,  295,  942,  295,  306,  942,  942,  306,  942,
      942,  942,  942,  942,  942,  306,  315,  942,  942,  942,
      942,  942,  942,  315,  352,  352,  942,  942,  352,  942,

      352,  352,  352,  352,  942,  352,  358,  358,  942,  942,
      358,  942,  358,  358,  358,  358,  942,  358,  364,  364,
      942,  942,  364,  364,  364,  364,  942,  364,  364,  364,
      368,  368,  942,  942,  368,  368,  368,  368,  368,  368,
      368,  368,  388,  942,  942,  942,  388,  942,  388,  388,
      388,  942,  388,  388,  393,  942,  942,  942,  942,  942,
      942,  393,  402,  942,  942,  942,  942,  942,  942,  402,
      454,  454,  454,  454,  454,  454,  454,  454,  454,  454,
      454,  460,  460,  460,  460,  460,  460,  460,  460,  460,
      460,  460,  461,  942,  942,  942,  942,  942,  942,  461,

      470,  942,  942,  942,  942,  942,  942,  470,  492,  492,
      492,  492,  492,  492,  492,  492,  492,  492,  492,  514,
      942,  942,  514,  942,  942,  942,  942,  942,  942,  514,
      523,  942,  942,  942,  942,  942,  942,  523,  539,  539,
      539,  539,  539,  539,  539,  942,  539,  942,  539,  539,
      637,  942,  637,  942,  942,  942,  942,  637,  756,  942,
      942,  942,  942,  942,  942,  756,  665,  665,  942,  665,
      665,  665,  665,  665,  665,  665,  665,  665,  815,  815,
      815,  815,  815,  815,  815,  815,  815,  815,  815,  815,
      219,  942,  942,  942,  942,  942,  942,  219,  315,  942,

      942,  315,  942,  942,  942,  942,  942,  942,  315,   19,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942
    } ;

static const flex_int16_t yy_chk[4982] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    3,    3,   42,    3,   43,    4,    4,    3,
        4,  764,    5,    5,    4,    5,    3,    6,    6,    5,
        6,    4,    7,    7,    6,   42,    5,   43,    8,    8,
       44,    6,    7,    9,    9,   10,   10,    7,    8,   11,
       11,   11,  724,    8,   12,   12,   12,   21,   21,   21,
       32,   44,   37,  674,   32,   11,   37,   37,   68,   68,

       12,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   15,   15,   15,  646,   15,   22,  580,   41,
       15,   15,   64,   93,   93,   15,   23,   23,   15,  377,
       22,   15,   15,   15,   15,   15,   22,  579,  102,   23,

       41,   41,  102,   64,  377,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   66,   66,   66,   15,   16,   16,
       16,   36,   16,  480,   36,  480,   16,   16,   36,   36,
       36,   16,   49,   49,   16,   50,   50,   16,   16,   16,
       16,   16,   36,   49,   36,  578,   50,   51,   51,   52,
       52,  123,   49,   51,   49,   50,  123,   50,   51,  577,
       52,   65,   65,   65,   65,   65,   51,  173,   52,   51,
      576,   52,  173,   16,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,

       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   17,
       17,   17,   17,   17,   17,   27,   27,   53,   53,   54,
       54,   55,   55,   56,   56,  103,   27,  108,   53,  103,
       54,  108,   55,   53,   56,   53,  109,   27,   54,   53,
      109,   54,   54,   55,  531,   56,   71,   71,   71,   71,
       27,   27,   27,   27,   27,   27,   27,   27,   27,   38,

      522,   38,   38,  145,   57,   57,   67,   67,   67,   67,
       67,   38,  378,   38,   57,   57,   91,   91,   91,  483,
       38,   38,   38,   38,  145,  145,   57,  378,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   38,   38,   69,   69,
       69,   69,   69,   75,  481,  126,  478,   38,   38,   38,
       38,   38,   38,   38,   38,   38,   58,   58,  126,   59,
       59,  136,   60,   60,  126,  136,   58,   58,  160,  160,
       59,  183,   59,   60,  469,   60,  183,  439,   58,   59,
       58,   59,  199,  199,   60,   70,   70,   70,   70,   70,

       72,   72,   72,   72,   72,   74,   74,   74,  141,  410,
       74,  401,  141,  141,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   76,   76,   76,   76,   76,   76,   76,
       76,   76,   78,   78,  209,   79,   79,   81,   81,   80,
       80,  214,  214,   78,  389,   80,   79,  209,   81,  387,
       80,  386,   78,  209,   78,   79,   81,   79,   80,   81,
      146,   80,   96,   96,   96,   96,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   77,   82,   82,   84,   84,
      385,  146,   85,   85,   83,   83,  381,   82,  384,   84,
      223,  223,   82,   85,   82,   83,  147,  380,   82,  381,

       84,   77,   77,   83,   85,  381,   83,   83,   86,   86,
       87,   87,   77,   88,   88,  252,  252,  147,   86,   86,
       87,   87,  379,   77,   88,  370,   88,  158,  158,  158,
       86,  148,   87,   88,   87,   88,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   89,   89,   90,   90,   90,
       90,   90,  148,  197,  197,  197,   89,  323,   89,   92,
       92,   92,   92,   92,  204,  204,  204,   89,   94,   94,
       94,   94,   94,   95,   95,   95,   95,   95,   97,   97,
       97,   97,   97,  125,  125,  125,  127,  127,  156,  128,
      128,  125,  125,  300,  300,  125,  314,  125,  125,  127,

      128,  125,  212,  212,  212,  127,  221,  221,  221,  156,
      260,  128,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  131,  131,  234,  310,  310,  140,  234,  304,  140,
      256,  260,  131,  140,  140,  140,  157,  157,  157,  157,
      157,  319,  319,  131,  250,  250,  250,  140,  238,  140,
      159,  159,  159,  159,  159,  161,  161,  161,  161,  161,
      162,  162,  162,  162,  163,  163,  163,  163,  163,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  181,  181,
      181,  181,  181,  181,  181,  181,  181,  182,  182,  236,
      184,  184,  235,  185,  185,  187,  187,  248,  182,  248,

      227,  184,  248,  218,  185,  206,  187,  397,  397,  182,
      184,  203,  184,  185,  187,  185,  168,  187,  201,  201,
      201,  201,  182,  182,  182,  182,  182,  182,  182,  182,
      182,  186,  186,  188,  188,  189,  189,  186,  216,  216,
      216,  216,  186,  166,  188,  164,  189,  406,  406,  188,
      186,  188,  154,  186,  189,  188,  150,  189,  189,  190,
      190,  191,  191,  192,  192,  193,  193,  207,  207,  207,
      190,  143,  191,  192,  192,  193,  193,  194,  194,  257,
      207,  190,  262,  191,  139,  192,  207,  193,  194,  193,
      194,  195,  195,  225,  225,  225,  225,  194,  137,  194,

      257,  257,  195,  262,  195,  196,  196,  196,  196,  196,
      298,  298,  298,  195,  198,  198,  198,  198,  198,  200,
      200,  200,  200,  200,  202,  202,  202,  202,  202,  208,
      208,  208,  210,  210,  211,  211,  211,  211,  211,  308,
      308,  308,  208,  210,  254,  254,  254,  254,  208,  213,
      213,  213,  213,  213,  210,  215,  215,  215,  215,  215,
      217,  217,  217,  217,  217,  220,  220,  220,  220,  220,
      222,  222,  222,  222,  222,  224,  224,  224,  224,  224,
      226,  226,  226,  226,  226,  228,  228,  229,  229,  317,
      317,  317,  237,  395,  395,  395,  228,  132,  229,  237,

      237,  249,  249,  249,  249,  249,  122,  228,  120,  229,
      237,  237,  243,  243,  243,  243,  243,  243,  243,  243,
      243,  244,  244,  244,  244,  244,  244,  244,  244,  244,
      245,  264,  465,  465,  245,  245,  245,  251,  251,  251,
      251,  251,  253,  253,  253,  253,  253,  118,  245,  115,
      245,  247,  264,  247,  266,  266,  247,  255,  255,  255,
      255,  255,  267,  267,  114,  266,  266,  268,  268,  269,
      269,  284,  267,  267,  270,  270,  266,  113,  268,  107,
      269,  404,  404,  404,  267,  270,  101,  269,  268,  268,
       98,  269,  284,  474,  474,  305,  270,   73,  271,  271,

      247,  247,  247,  247,  247,  247,  247,  247,  247,  271,
      518,  518,  272,  272,   62,  273,  273,   46,  305,  271,
      271,  272,   28,  272,  527,  527,  273,  274,  274,  275,
      275,  276,  276,   19,  272,  273,    0,  273,  274,    0,
      275,    0,  276,    0,  276,  274,  277,  277,    0,  274,
      305,  275,    0,  276,  278,  278,    0,  277,  279,  279,
      463,  463,  463,  280,  280,  278,    0,  277,  277,  279,
      278,    0,  279,  280,  280,    0,  278,  281,  281,    0,
      279,  282,  282,  285,  285,  280,  642,  642,  281,  670,
      670,  295,  282,    0,  285,  282,  457,    0,  457,  281,

        0,  457,  281,  282,    0,  285,  286,  286,  286,  286,
      286,  287,  287,  287,  287,  287,  288,  288,  288,  288,
      288,  289,  289,  289,  289,  289,  290,  290,  290,  290,
      290,  291,  291,  291,  291,  291,  292,  292,  292,  292,
      292,  293,  293,  293,  293,  293,  294,  294,  294,  720,
      720,  294,  295,  295,  295,  295,  295,  295,  295,  295,
      295,  296,  296,  296,  296,  296,  296,  296,  296,  296,
      297,  297,  297,  297,  297,  299,  299,  299,  299,  299,
      301,  301,  301,  301,  301,  302,  302,  302,  302,  303,
      303,  303,  303,  303,  306,  306,  307,  307,  307,  307,

      307,  312,  312,  312,  312,  306,  315,  294,  294,  294,
      294,  294,  294,  294,  294,  294,  306,  309,  309,  309,
      309,  309,  311,  311,  311,  311,  311,  313,  313,  313,
      313,  313,  316,  316,  316,  316,  316,  318,  318,  318,
      318,  318,  320,  320,  320,  320,  320,  321,  321,  321,
      321,  322,  322,  322,  322,  322,  344,  344,  344,  344,
      344,  399,  399,  399,  399,  324,  324,  315,  315,  315,
      315,  315,  315,  315,  315,  315,  324,  325,  325,  326,
      326,    0,  327,  327,  328,  328,    0,  324,  325,    0,
      326,  326,  327,  327,    0,  328,  329,  329,    0,  325,

        0,  326,  330,  330,  327,  328,  328,  329,  331,  331,
        0,  332,  332,  330,  329,  333,  333,    0,  329,  331,
      332,    0,  332,    0,  330,    0,  333,  334,  334,  331,
      331,  335,  335,  332,    0,  333,    0,  333,  334,  336,
      336,    0,  335,  337,  337,  334,  338,  338,    0,  334,
      336,    0,  336,  335,  337,  339,  339,  338,  458,    0,
      458,  336,  338,  458,  337,  337,  339,    0,  338,  339,
      340,  340,  341,  341,  342,  342,    0,  339,  343,  343,
      340,  340,  461,  341,  461,  342,    0,  461,  342,  343,
      760,  760,  340,  637,  341,  637,  342,  341,  637,    0,

      343,  345,  345,  345,  345,  345,  346,  346,  346,  346,
      346,  347,  347,  347,  347,  347,  348,  348,  348,  348,
      348,  349,  349,  349,  349,  349,  350,  350,  350,  350,
      350,  351,  351,  351,  351,  351,  374,  374,  374,    0,
        0,  382,  382,    0,  374,  374,  383,  383,  374,    0,
      374,  374,  382,    0,  374,  393,  393,  383,  394,  394,
      394,  394,  394,  382,    0,    0,  393,    0,  383,  396,
      396,  396,  396,  396,  472,  472,  472,  393,  398,  398,
      398,  398,  398,  400,  400,  400,  400,  400,  402,  402,
      402,  402,  402,  402,  402,  402,  402,  403,  403,  403,

      403,  403,  405,  405,  405,  405,  405,  407,  407,  407,
      407,  407,  408,  408,  408,  408,  409,  409,  409,  409,
      409,  411,  411,  412,  412,  413,  413,    0,  414,  414,
      415,  415,  411,    0,  412,    0,  413,  413,  414,  414,
        0,  415,    0,  411,    0,  412,    0,  413,  416,  416,
      414,  415,  415,  417,  417,    0,  418,  418,    0,  416,
      419,  419,    0,  772,  417,  772,  416,  418,  772,  419,
      416,  419,  420,  420,    0,  417,    0,  418,  418,  421,
      421,    0,  419,  420,  422,  422,    0,  423,  423,    0,
      421,  839,  420,  839,  420,  422,  839,  421,  423,    0,

      423,  421,  424,  424,  425,  425,  422,  426,  426,  423,
        0,  428,  428,  424,  893,  425,  893,    0,  426,  893,
      425,  426,  428,  424,  424,    0,  425,  427,  427,  426,
      429,  429,    0,  428,  430,  430,  428,  427,  427,    0,
        0,  429,    0,    0,  429,  430,  516,  516,  516,  427,
        0,    0,  429,  525,  525,  525,  430,  431,  431,  431,
      431,  431,  432,  432,  432,  432,  432,  433,  433,  433,
      433,  433,  434,  434,  434,  434,  434,  435,  435,  435,
      435,  435,  436,  436,  436,  436,  436,  437,  437,  437,
      437,  437,  440,  440,  440,  440,  440,  441,  441,  441,

      441,  441,  442,  442,  442,  442,  442,  443,  443,  443,
      443,  443,  444,  444,  444,  444,  444,  445,  445,  445,
      445,  445,  446,  446,  446,  446,  446,  447,  447,  447,
      447,  447,  448,  448,  448,  448,  448,  449,  449,  449,
      449,  449,  450,  450,  450,  450,  450,  451,  451,  451,
      451,  451,  452,  452,  452,  452,  452,  453,  453,  453,
      453,  453,  462,  462,  462,  462,  462,  464,  464,  464,
      464,  464,  466,  466,  466,  466,  466,  467,  467,  467,
      467,  468,  468,  468,  468,  468,  470,  470,  470,  470,
      470,  470,  470,  470,  470,  471,  471,  471,  471,  471,

      473,  473,  473,  473,  473,  475,  475,  475,  475,  475,
      476,  476,  476,  476,  477,  477,  477,  477,  477,  482,
      482,  485,  485,  485,  485,  485,  486,  486,  486,  486,
      486,  482,  487,  487,  487,  487,  487,  488,  488,  488,
      488,  488,  489,  489,  489,  489,  489,  490,  490,  490,
      490,  490,  491,  491,  491,  491,  491,  511,  511,  511,
      511,  511,  512,  512,  512,  512,  512,  513,  513,  513,
      513,  513,  640,  640,  640,  482,  482,  482,  482,  482,
      482,  482,  482,  482,  484,  484,  493,  493,  494,  494,
      495,  495,  816,  816,  494,    0,  484,  493,    0,  494,

      495,  495,    0,  496,  496,  497,  497,    0,  493,  493,
      494,  496,  495,  816,  496,    0,  497,  515,  515,  515,
      515,  515,  668,  668,  668,  496,    0,  497,  498,  498,
      517,  517,  517,  517,  517,  718,  718,  718,  498,  498,
      484,  484,  484,  484,  484,  484,  484,  484,  484,    0,
      498,  499,  499,  500,  500,  501,  501,  502,  502,  503,
      503,    0,  499,  501,  500,    0,  501,  502,  502,    0,
      503,    0,    0,  499,    0,  500,    0,  501,    0,  502,
        0,  503,  503,  504,  504,  505,  505,  506,  506,    0,
      507,  507,  508,  508,  504,  505,  505,    0,  506,  509,

      509,  507,    0,  508,    0,  504,  504,  505,  507,  506,
      509,    0,  507,    0,  508,  509,  519,  519,  519,  519,
      519,  509,  510,  510,    0,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  510,  514,  520,  520,  520,  520,  521,  521,

      521,  521,  521,  523,  524,  524,  524,  524,  524,  526,
      526,  526,  526,  526,  528,  528,  528,  528,  528,  529,
      529,  529,  529,  530,  530,  530,  530,  530,  532,  532,
      532,  532,  532,  533,  533,  533,  533,  533,  534,  534,
      534,  534,  534,  535,  535,  535,  535,  535,  536,  536,
      536,  536,  536,    0,  514,  514,  514,  514,  514,  514,
      514,  514,  514,    0,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  537,  537,  537,  537,  537,  538,  538,
      538,  538,  538,  540,  541,  541,  541,  541,  541,  758,
      758,  758,  540,    0,    0,    0,  540,  542,  542,  542,

      542,  542,  540,  540,    0,  540,  543,  543,  543,  543,
      543,  544,  544,  544,  544,  544,  545,  545,  545,  545,
      545,  546,  546,  546,  546,  546,  547,  547,  547,  547,
      547,  548,  548,  548,  548,  548,  549,  549,  549,  549,
      549,  550,  550,  550,  550,  550,  551,  551,  551,  551,
      551,  552,  552,  552,  552,  552,  553,  553,  553,  553,
      553,  554,  554,  554,  554,  554,  555,  555,  556,  556,
      557,  557,    0,    0,  556,  558,  558,  555,    0,  556,
      557,  557,    0,  558,  559,  559,  558,    0,  555,  555,
      556,    0,  557,  560,  560,  559,    0,  558,  561,  561,

      562,  562,    0,  560,  560,    0,  559,  564,  564,  561,
        0,  562,    0,  563,  563,  560,    0,  564,  564,    0,
      561,  563,  562,    0,  563,  565,  565,  566,  566,  564,
      567,  567,  568,  568,    0,  563,  565,    0,  566,    0,
      567,  567,    0,  568,  569,  569,    0,  565,  565,  566,
      566,  621,  567,  621,  568,  569,  570,  570,  571,  571,
      621,  621,  569,    0,    0,    0,  569,  570,    0,  571,
        0,  621,  621,    0,  571,    0,    0,    0,  570,    0,
      571,  572,  572,    0,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,

      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  572,
      572,  572,  573,  573,  573,  573,  573,  574,  574,  574,
      574,  574,  575,  575,  575,  575,  575,  581,  581,  581,
      581,  581,  582,  582,  582,  582,  582,  583,  583,  583,
      583,  583,  584,  584,  584,  584,  584,  585,  585,  585,
      585,  585,  586,  586,  586,  586,  586,  587,  587,  587,

      587,  587,  588,  588,  588,  588,  588,  589,  589,  589,
      589,  589,  590,  590,  590,  590,  590,  591,  591,  591,
      591,  591,  592,  592,  592,  592,  592,  593,  593,  593,
      593,  593,  594,  594,  594,  594,  594,  595,  595,  596,
      596,  597,  597,    0,    0,  596,  598,  598,  595,    0,
      596,  597,  597,    0,  598,  599,  599,  598,    0,  595,
      595,  596,    0,  597,  600,  600,  599,    0,  598,  601,
      601,  602,  602,    0,  600,  600,    0,  599,  604,  604,
      601,    0,  602,    0,  603,  603,  600,    0,  604,  604,
        0,  601,  603,  602,    0,  603,  605,  605,  606,  606,

      604,  607,  607,  608,  608,    0,  603,  605,    0,  606,
        0,  607,  607,    0,  608,  609,  609,    0,  605,  605,
      606,  606,  622,  607,  622,  608,  609,  610,  610,  611,
      611,  622,  622,  609,    0,    0,    0,  609,  610,    0,
      611,    0,  622,  622,    0,  611,    0,    0,    0,  610,
        0,  611,  612,  612,  612,  612,  612,  613,  613,  613,
      613,  613,  614,  614,  614,  614,  614,  615,  615,  615,
      615,  615,  616,  616,  616,  616,  616,  617,  617,  617,
      617,  617,  618,  618,  618,  618,  618,  619,  619,  619,
      619,  619,  620,  620,  620,  620,  620,  623,  623,  623,

      623,  623,  624,  624,  624,  624,  624,  625,  625,  625,
      625,  625,  626,  626,  626,  626,  626,  627,  627,  627,
      627,  627,  628,  628,  628,  628,  628,  629,  629,  629,
      629,  629,  630,  630,  630,  630,  630,  631,  631,  631,
      631,  631,  632,  632,  632,  632,  632,  633,  633,  633,
      633,  633,  634,  634,  634,  634,  634,  635,  635,  635,
      635,  635,  636,  636,  636,  636,  636,  638,  638,  638,
      638,  638,  638,  638,  638,  638,  639,  639,  639,  639,
      639,  641,  641,  641,  641,  641,  643,  643,  643,  643,
      643,  644,  644,  644,  644,  645,  645,  645,  645,  645,

      647,  647,  647,  647,  647,  648,  648,  648,  648,  648,
      649,  649,  649,  649,  649,  650,  650,    0,  651,  651,
      652,  652,    0,  653,  653,    0,  650,  654,  654,  651,
        0,  652,  650,  651,  653,    0,  653,  650,  654,    0,
      651,  654,  652,  655,  655,  653,    0,  656,  656,  654,
      657,  657,    0,    0,  655,  658,  658,  655,  656,    0,
        0,  657,  659,  659,    0,  655,  658,  660,  660,  656,
      656,    0,  657,  659,    0,  658,    0,  658,  660,  659,
      661,  661,  662,  662,  659,  663,  663,  660,  661,  660,
      662,  661,    0,  662,    0,    0,  663,    0,  664,  664,

        0,    0,  661,    0,  662,    0,    0,  663,  664,  664,
      667,  667,  667,  667,  667,  669,  669,  669,  669,  669,
      664,  671,  671,  671,  671,  671,  672,  672,  672,  672,
      673,  673,  673,  673,  673,  675,  675,  676,  676,  676,
      676,  676,  722,  722,  722,  722,  675,  677,  677,  677,
      677,  677,  678,  678,  678,  678,  678,  675,  679,  679,
      679,  679,  679,  680,  680,  680,  680,  680,  681,  681,
      681,  681,  681,  682,  682,  682,  682,  682,  683,  683,
      683,  683,  683,  684,  684,  684,  684,  684,  685,  685,
      685,  685,  685,  686,  686,  686,  686,  686,  687,  687,

      687,  687,  687,  688,  688,  688,  688,  688,  689,  689,
      689,  689,  689,  690,  690,  690,  690,  690,  691,  691,
      691,  691,  691,  692,  692,  692,  692,  692,  693,  694,
      694,  694,  694,  694,    0,    0,    0,  693,    0,    0,
        0,  693,  695,  695,  695,  695,  695,  693,  693,    0,
      693,  696,  696,  696,  696,  696,  697,  697,  697,  697,
      697,  698,  698,  698,  698,  698,  699,  699,  699,  699,
      699,  700,  700,    0,  701,  701,  702,  702,    0,  703,
      703,    0,  700,  704,  704,  701,    0,  702,  700,  701,
      703,    0,  703,  700,  704,    0,  701,  704,  702,  705,

      705,  703,    0,  706,  706,  704,  707,  707,    0,    0,
      705,  708,  708,  705,  706,    0,    0,  707,  709,  709,
        0,  705,  708,  710,  710,  706,  706,    0,  707,  709,
        0,  708,    0,  708,  710,  709,  711,  711,  712,  712,
      709,  713,  713,  710,  711,  710,  712,  711,    0,  712,
      876,  876,  713,    0,  714,  714,  725,  725,  711,    0,
      712,  715,  715,  713,  714,  714,    0,  725,    0,    0,
      715,  876,    0,    0,  715,    0,  714,    0,  725,    0,
      715,  715,  715,  715,  715,  717,  717,  717,  717,  717,
      719,  719,  719,  719,  719,  721,  721,  721,  721,  721,

      723,  723,  723,  723,  723,  726,  726,  726,  726,  726,
      727,  727,  727,  727,  727,    0,  715,  728,  728,  728,
      728,  728,  729,  729,  729,  729,  729,  730,  730,  730,
      730,  730,  731,  731,  731,  731,  731,  732,  732,    0,
      733,  733,  734,  734,    0,  735,  735,    0,  732,  736,
      736,  733,    0,  734,  732,  733,  735,    0,  735,  732,
      736,    0,  733,  736,  734,  737,  737,  735,    0,  738,
      738,  736,  739,  739,    0,    0,  737,  740,  740,  737,
      738,    0,    0,  739,  741,  741,    0,  737,  740,  742,
      742,  738,  738,    0,  739,  741,    0,  740,    0,  740,

      742,  741,  743,  743,  744,  744,  741,  745,  745,  742,
      743,  742,  744,  743,    0,  744,  747,  747,  745,    0,
      746,  746,  748,  748,  743,    0,  744,  747,    0,  745,
      746,  746,    0,  748,  762,  762,  762,  762,  747,    0,
        0,    0,  746,    0,  748,  749,  749,  749,  749,  749,
      749,  749,  749,  749,  750,  750,  750,  750,  750,  751,
      751,  751,  751,  751,  752,  752,  752,  752,  752,  753,
      753,  753,  753,  753,  754,  754,  754,  754,  754,  755,
      755,  755,  755,  755,  756,  756,  756,  756,  756,  756,
      756,  756,  756,  757,  757,  757,  757,  757,  759,  759,

      759,  759,  759,  761,  761,  761,  761,  761,  763,  763,
      763,  763,  763,  765,  765,  765,  765,  765,  766,  766,
      766,  766,  766,  767,  767,  767,  767,  767,  768,  768,
      768,  768,  768,  769,  769,  769,  769,  769,  770,  770,
      770,  770,  770,  771,  771,  771,  771,  771,  773,  773,
      774,  774,  775,  775,    0,  776,  776,    0,  773,  773,
        0,  774,    0,  775,  777,  777,  776,  778,  778,    0,
      773,    0,  774,  776,  775,  777,    0,  776,  778,  779,
      779,  780,  780,    0,    0,  778,  777,  781,  781,  778,
      779,    0,  780,  779,    0,  782,  782,  781,  781,  783,

      783,  779,    0,  780,    0,  780,  782,  784,  784,  781,
      783,  785,  785,  782,    0,    0,    0,  782,  784,    0,
      784,  783,  785,  786,  786,  786,  786,  786,    0,  784,
        0,    0,    0,  785,  787,  787,  787,  787,  787,  788,
      788,  788,  788,  788,  789,  789,  789,  789,  789,  790,
      790,  790,  790,  790,  791,  791,  791,  791,  791,  792,
      792,  792,  792,  792,  793,  793,  793,  793,  793,  794,
      794,  794,  794,  794,  795,  795,  795,  795,  795,  796,
      796,  796,  796,  796,  797,  797,  797,  797,  797,  798,
      798,  798,  798,  798,  800,  800,  801,  802,  802,  803,

      803,  804,  804,    0,    0,  800,    0,  802,  802,    0,
      803,    0,  804,  805,  805,    0,  800,  806,  806,  802,
        0,  803,    0,  804,  805,  807,  807,    0,  806,  809,
      809,  805,    0,    0,    0,  805,  807,    0,    0,  806,
      809,    0,    0,  807,    0,    0,    0,  807,    0,    0,
        0,  809,    0,  809,    0,  808,  808,  801,  801,  801,
      801,  801,  801,  801,  801,  801,  808,  811,  811,  808,
      810,  810,  812,  812,    0,  813,  813,  808,  811,    0,
      810,  810,    0,  812,    0,  811,  813,    0,  813,  811,
      814,  814,  810,    0,  812,    0,    0,  813,    0,    0,

        0,  814,  817,  817,  817,  817,  817,  818,  818,  818,
      818,  818,  814,  819,  819,  819,  819,  819,  820,  820,
      820,  820,  820,  821,  821,  821,  821,  821,  822,  822,
      822,  822,  822,  823,  823,  823,  823,  823,  824,  824,
      826,  826,  827,  827,  828,  828,    0,  829,  829,  824,
      826,  826,    0,  827,    0,  828,  830,  830,  829,    0,
      824,    0,  826,    0,  827,  829,  828,  830,    0,  829,
      831,  831,  832,  832,  833,  833,    0,    0,  830,  834,
      834,  831,    0,  832,    0,  833,  832,    0,  831,  834,
      834,    0,  831,    0,  832,    0,  833,    0,  833,  835,

      835,  834,  836,  836,    0,  837,  837,    0,  838,  838,
      835,    0,    0,  836,    0,    0,  837,  835,  837,  838,
        0,  835,    0,    0,  836,    0,    0,  837,    0,    0,
      838,  841,  841,  841,  841,  841,  842,  842,  842,  842,
      842,  843,  843,  843,  843,  843,  844,  844,  844,  844,
      844,  845,  845,  845,  845,  845,  846,  846,  846,  846,
      846,  847,  847,  847,  847,  847,  848,  848,  848,  848,
      848,  849,  849,  849,  849,  849,  850,  850,  850,  850,
      850,  851,  851,  852,  852,  853,  853,  854,  854,  855,
      855,    0,  851,    0,  852,  854,  853,    0,  854,  851,

      855,  856,  856,  851,    0,  852,  852,  853,  855,  854,
        0,  855,  856,  857,  857,  856,  858,  858,  859,  859,
      860,  860,    0,  856,  857,    0,    0,  858,    0,  859,
        0,  860,    0,    0,    0,  857,    0,    0,  858,    0,
      859,    0,  860,  861,  861,  861,  861,  861,  862,  862,
      862,  862,  862,  863,  863,  863,  863,  863,  866,  866,
      867,  867,  868,  868,  869,  869,  870,  870,    0,  866,
        0,  867,  869,  868,    0,  869,  866,  870,  871,  871,
      866,    0,  867,  867,  868,  870,  869,    0,  870,  871,
      872,  872,  871,  873,  873,  874,  874,  875,  875,    0,

      871,  872,    0,    0,  873,    0,  874,    0,  875,    0,
        0,    0,  872,    0,    0,  873,    0,  874,    0,  875,
      877,  877,  877,  877,  877,  878,  878,  878,  878,  878,
      879,  879,  879,  879,  879,  880,  880,  881,  881,  882,
      882,  883,  883,  884,  884,    0,  880,    0,  881,  883,
      882,    0,  883,  880,  884,  885,  885,  880,    0,  881,
      881,  882,  884,  883,    0,  884,  885,  886,  886,  885,
      887,  887,  888,  888,  889,  889,    0,  885,  886,    0,
        0,  887,    0,  888,    0,  889,    0,    0,    0,  886,
        0,    0,  887,    0,  888,    0,  889,  890,  890,  890,

      890,  890,  891,  891,  891,  891,  891,  892,  892,  892,
      892,  892,  894,  894,  895,  895,  896,  896,    0,  897,
      897,  898,  898,  894,  895,  895,    0,  896,  900,  900,
      897,    0,  898,    0,  894,    0,  895,  897,  896,  900,
        0,  897,  898,  898,  901,  901,  902,  902,    0,    0,
      900,  903,  903,    0,  901,  901,    0,  902,    0,  904,
      904,    0,  903,  906,  906,    0,  901,    0,  902,  903,
      904,  908,  908,  903,  906,    0,  907,  907,  909,  909,
      904,  904,  908,  910,  910,  906,  907,  907,    0,  909,
      912,  912,    0,  908,  910,    0,  909,    0,  907,    0,

      909,  912,  913,  913,  910,  910,  914,  914,  915,  915,
        0,  912,  912,  913,    0,  916,  916,  914,    0,  915,
      914,  917,  917,    0,  913,  916,  916,    0,  914,    0,
      915,    0,  917,  918,  918,  919,  919,  916,    0,  920,
      920,    0,  917,  917,  918,    0,  919,  922,  922,  919,
      920,    0,  921,  921,    0,  918,    0,  919,  922,  923,
      923,  920,  921,  921,  924,  924,  925,  925,  922,  922,
      923,    0,  926,  926,  921,  924,    0,  925,  924,  927,
      927,  923,  926,  926,  928,  928,  924,    0,  925,    0,
      927,  929,  929,    0,  926,  928,  930,  930,  931,  931,

        0,  927,  929,  928,  932,  932,  928,  930,    0,  931,
      933,  933,    0,  929,    0,  932,    0,  931,  930,    0,
      931,  933,  934,  934,  935,  935,  932,  936,  936,  937,
      937,    0,  933,  934,    0,  935,    0,    0,  936,    0,
      937,  934,  938,  938,  934,  936,  935,  937,    0,  936,
        0,  937,    0,  938,  939,  939,  940,  940,  941,  941,
      938,    0,    0,    0,  938,  939,    0,  940,    0,  941,
        0,    0,    0,    0,    0,    0,  939,    0,  940,    0,
      941,  943,  943,  943,  943,  943,  943,  943,  943,  943,
      943,  943,  943,  944,  944,  944,  944,  944,  944,  944,

      944,  944,  944,  944,  944,  945,  945,  945,  945,  945,
      945,  945,  945,  945,  945,  945,  945,  946,  946,  946,
      946,  946,  946,  946,  946,  946,  946,  946,  946,  947,
      947,  947,  947,  947,  947,  947,  947,  947,  947,  947,
      947,  948,  948,  948,  948,  948,  948,  948,  948,  948,
      948,  948,  948,  949,    0,    0,    0,    0,    0,    0,
      949,  950,    0,    0,    0,    0,    0,    0,  950,  951,
      951,  951,  951,    0,  951,  952,    0,    0,  952,    0,
        0,    0,    0,    0,    0,  952,  953,    0,    0,    0,
        0,    0,    0,  953,  954,  954,    0,    0,  954,    0,

      954,  954,  954,  954,    0,  954,  955,  955,    0,    0,
      955,    0,  955,  955,  955,  955,    0,  955,  956,  956,
        0,    0,  956,  956,  956,  956,    0,  956,  956,  956,
      957,  957,    0,    0,  957,  957,  957,  957,  957,  957,
      957,  957,  958,    0,    0,    0,  958,    0,  958,  958,
      958,    0,  958,  958,  959,    0,    0,    0,    0,    0,
        0,  959,  960,    0,    0,    0,    0,    0,    0,  960,
      961,  961,  961,  961,  961,  961,  961,  961,  961,  961,
      961,  962,  962,  962,  962,  962,  962,  962,  962,  962,
      962,  962,  963,    0,    0,    0,    0,    0,    0,  963,

      964,    0,    0,    0,    0,    0,    0,  964,  965,  965,
      965,  965,  965,  965,  965,  965,  965,  965,  965,  966,
        0,    0,  966,    0,    0,    0,    0,    0,    0,  966,
      967,    0,    0,    0,    0,    0,    0,  967,  968,  968,
      968,  968,  968,  968,  968,    0,  968,    0,  968,  968,
      969,    0,  969,    0,    0,    0,    0,  969,  970,    0,
        0,    0,    0,    0,    0,  970,  971,  971,    0,  971,
      971,  971,  971,  971,  971,  971,  971,  971,  972,  972,
      972,  972,  972,  972,  972,  972,  972,  972,  972,  972,
      973,    0,    0,    0,    0,    0,    0,  973,  974,    0,

        0,  974,    0,    0,    0,    0,    0,    0,  974,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942,  942,  942,  942,  942,  942,  942,  942,  942,  942,
      942
    } ;

extern int yy_flex_debug;
int yy_flex_debug = 0;

static yy_state_type *yy_state_buf=0, *yy_state_ptr=0;
static char *yy_full_match;
static int yy_lp;
static int yy_looking_for_trail_begin = 0;
static int yy_full_lp;
static int *yy_full_state;
#define YY_TRAILING_MASK 0x2000
#define YY_TRAILING_HEAD_MASK 0x4000
#define REJECT \
{ \
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */ \
yy_cp = (yy_full_match); /* restore poss. backed-over text */ \
(yy_lp) = (yy_full_lp); /* restore orig. accepting pos. */ \
(yy_state_ptr) = (yy_full_state); /* restore orig. state */ \
yy_current_state = *(yy_state_ptr); /* restore curr. state */ \
++(yy_lp); \
goto find_rule; \
}

#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
/* -*- C++ -*- */
/*
 * Scilab ( https://www.scilab.org/ ) - This file is part of Scilab
 * Copyright (C) 2008-2012 - Scilab Enterprises - Bruno JOFRET
 * Copyright (C) 2012 - 2016 - Scilab Enterprises
 * Copyright (C) 2018 - Dirk Reusch, Kybernetik Dr. Reusch
 * Copyright (C) 2023 - Dassault Systemes - Bruno JOFRET
 *
 * This file is hereby licensed under the terms of the GNU GPL v2.0,
 * pursuant to article 5.3.4 of the CeCILL v.2.1.
 * This file was originally licensed under the terms of the CeCILL v2.1,
 * and continues to be available under such terms.
 * For more information, see the COPYING file which you should have received
 * along with this program.
 *
 */

#include <stack>

#include "isatty.hxx"
#include "parse.hxx"
#include "parser_private.hxx"

#include "context.hxx"

extern "C"
{
#include "charEncoding.h"
#include "sci_malloc.h"
}

static std::stack<int> paren_levels;

static int comment_level = 0;
static int last_token = 0;
static int linebreak_stored_token = 0;
static bool linebreak_stored_space = FALSE;
static int exit_status = PARSE_ERROR;
static int str_opener_column = 0;
static std::string current_file;
static std::string program_name;

static std::string pstBuffer;

extern void yyerror(std::string);

#define YY_USER_ACTION                          \
    yylloc.first_column = yylloc.last_column; yylloc.last_column += yyleng;
//yylloc.last_column += yyleng;

/* -*- Verbose Special Debug -*- */
//#define DEV
//#define TOKENDEV

#ifdef DEV
#define DEBUG(x) std::cout << "[DEBUG] " << x << std::endl;
#else
#define DEBUG(x) /* Nothing */
#endif

#ifdef DEV
std::string token_to_string(int);
#endif

#define INITIAL 0
#define SIMPLESTRING 1
#define DOUBLESTRING 2
#define REGIONCOMMENT 3
#define LINECOMMENT 4
#define LINEBREAK 5
#define MATRIX 6
#define SHELLMODE 7
#define BEGINID 8

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

        /* Create the reject buffer large enough to save one state per allowed character. */
        if ( ! (yy_state_buf) )
            (yy_state_buf) = (yy_state_type *)yyalloc(YY_STATE_BUF_SIZE  );
            if ( ! (yy_state_buf) )
                YY_FATAL_ERROR( "out of dynamic memory in yylex()" );

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
		yy_current_state += YY_AT_BOL();

		(yy_state_ptr) = (yy_state_buf);
		*(yy_state_ptr)++ = yy_current_state;

yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 943 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			*(yy_state_ptr)++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 4910 );

yy_find_action:
		yy_current_state = *--(yy_state_ptr);
		(yy_lp) = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( (yy_lp) && (yy_lp) < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[(yy_lp)];
				if ( yy_act & YY_TRAILING_HEAD_MASK ||
				     (yy_looking_for_trail_begin) )
					{
					if ( yy_act == (yy_looking_for_trail_begin) )
						{
						(yy_looking_for_trail_begin) = 0;
						yy_act &= ~YY_TRAILING_HEAD_MASK;
						break;
						}
					}
				else if ( yy_act & YY_TRAILING_MASK )
					{
					(yy_looking_for_trail_begin) = yy_act & ~YY_TRAILING_MASK;
					(yy_looking_for_trail_begin) |= YY_TRAILING_HEAD_MASK;
					}
				else
					{
					(yy_full_match) = yy_cp;
					(yy_full_state) = (yy_state_ptr);
					(yy_full_lp) = (yy_lp);
					break;
					}
				++(yy_lp);
				goto find_rule;
				}
			--yy_cp;
			yy_current_state = *--(yy_state_ptr);
			(yy_lp) = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp = yy_bp + 3;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{
// BOM found ==> ignored
}
	YY_BREAK
case 2:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 3:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
{
  if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinArguments);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(ARGUMENTS);
}
	YY_BREAK
case 5:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(IF);
}
	YY_BREAK
case 6:
YY_RULE_SETUP
{
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(THEN);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        // Pop to step out IF
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElse);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSE);
}
	YY_BREAK
case 8:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinElseIf);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ELSEIF);
}
	YY_BREAK
case 9:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(END);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSelect);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SELECT);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinSwitch);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(SWITCH);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinOtherwise);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(OTHERWISE);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
        ParserSingleInstance::pushControlStatus(Parser::WithinCase);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(CASE);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFunction);
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
    return scan_throw(FUNCTION);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::popControlStatus();
    }
    DEBUG("BEGIN(INITIAL)");
    BEGIN(INITIAL);
	return scan_throw(ENDFUNCTION);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinFor);
    }
    BEGIN(INITIAL);
    return scan_throw(FOR);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
{
	if (last_token != DOT)
    {
        ParserSingleInstance::pushControlStatus(Parser::WithinWhile);
    }
	BEGIN(INITIAL);
	return scan_throw(WHILE);
}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
	BEGIN(INITIAL);
    return scan_throw(DO);
}
	YY_BREAK
case 19:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(BREAK);
}
	YY_BREAK
case 20:
YY_RULE_SETUP
{
    	BEGIN(INITIAL);
        return scan_throw(CONTINUE);
}
	YY_BREAK
case 21:
YY_RULE_SETUP
{
	ParserSingleInstance::pushControlStatus(Parser::WithinTry);
	BEGIN(INITIAL);
	return scan_throw(TRY);
}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
    // Pop to step out TRY
	ParserSingleInstance::popControlStatus();
	ParserSingleInstance::pushControlStatus(Parser::WithinCatch);
	BEGIN(INITIAL);
	return scan_throw(CATCH);
}
	YY_BREAK
case 23:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
    BEGIN(INITIAL);
    return scan_throw(RETURN);
}
	YY_BREAK
case 25:
/* rule 25 can match eol */
YY_RULE_SETUP
{
        BEGIN(BEGINID);
}
	YY_BREAK

case 26:
YY_RULE_SETUP
{
        wchar_t *pwText = to_wide_string(yytext);
        if (yytext != NULL && pwText == NULL)
        {
	    std::string str = "Can\'t convert \'";
	    str += yytext;
	    str += "\' to UTF-8";
	    BEGIN(INITIAL);
	    yyerror(str);
	    return scan_throw(FLEX_ERROR);
        }
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
	types::InternalType * pIT = symbol::Context::getInstance()->get(symbol::Symbol(*yylval.str));
        if (pIT && pIT->isCallable() && ParserSingleInstance::getControlStatus() != Parser::WithinArguments)
        {
            BEGIN(SHELLMODE);
        }
        else
        {
            BEGIN(INITIAL);
        }
	return scan_throw(ID);
    }
	YY_BREAK

case 27:
YY_RULE_SETUP
{
  return scan_throw(NOT);
}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
  return scan_throw(DOLLAR);
}
	YY_BREAK
case 29:
YY_RULE_SETUP
{
  return scan_throw(BOOLTRUE);
}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
  return scan_throw(BOOLFALSE);
}
	YY_BREAK
case 31:
YY_RULE_SETUP
{
  return scan_throw(AND);
}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
  return scan_throw(ANDAND);
}
	YY_BREAK
case 33:
YY_RULE_SETUP
{
  return scan_throw(OR);
}
	YY_BREAK
case 34:
YY_RULE_SETUP
{
  return scan_throw(OROR);
}
	YY_BREAK
case 35:
YY_RULE_SETUP
{
  return scan_throw(LPAREN);
}
	YY_BREAK
case 36:
YY_RULE_SETUP
{
  return scan_throw(RPAREN);
}
	YY_BREAK
case 37:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(SEMI);
}
	YY_BREAK
case 38:
YY_RULE_SETUP
{
	scan_step();
  return scan_throw(COMMA);
}
	YY_BREAK
case 39:
YY_RULE_SETUP
{
  return scan_throw(COLON);
}
	YY_BREAK
case 40:
YY_RULE_SETUP
{
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinCell);
  return scan_throw(LBRACE);
}
	YY_BREAK
case 41:
YY_RULE_SETUP
{
  return scan_throw(RBRACE);
}
	YY_BREAK
case 42:
YY_RULE_SETUP
{
  return scan_throw(DOTQUOTE);
}
	YY_BREAK
case 43:
YY_RULE_SETUP
{
  return scan_throw(DOTTIMES);
}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
  return scan_throw(DOTRDIVIDE);
}
	YY_BREAK
case 45:
YY_RULE_SETUP
{
  return scan_throw(DOTLDIVIDE);
}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
  return scan_throw(DOTPOWER);
}
	YY_BREAK
case 47:
YY_RULE_SETUP
{
  return scan_throw(MINUS);
}
	YY_BREAK
case 48:
YY_RULE_SETUP
{
  return scan_throw(PLUS);
}
	YY_BREAK
case 49:
YY_RULE_SETUP
{
  return scan_throw(TIMES);
}
	YY_BREAK
case 50:
YY_RULE_SETUP
{
  return scan_throw(RDIVIDE);
}
	YY_BREAK
case 51:
YY_RULE_SETUP
{
  return scan_throw(LDIVIDE);
}
	YY_BREAK
case 52:
YY_RULE_SETUP
{
  return scan_throw(POWER);
}
	YY_BREAK
case 53:
YY_RULE_SETUP
{
  return scan_throw(KRONTIMES);
}
	YY_BREAK
case 54:
YY_RULE_SETUP
{
  return scan_throw(KRONRDIVIDE);
}
	YY_BREAK
case 55:
YY_RULE_SETUP
{
  return scan_throw(KRONLDIVIDE);
}
	YY_BREAK
case 56:
/* rule 56 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLTIMES);
}
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLRDIVIDE);
}
	YY_BREAK
case 58:
/* rule 58 can match eol */
YY_RULE_SETUP
{
    unput(yytext[yyleng - 1]);
    return scan_throw(CONTROLLDIVIDE);
}
	YY_BREAK
case 59:
YY_RULE_SETUP
{
  return scan_throw(EQ);
}
	YY_BREAK
case 60:
YY_RULE_SETUP
{
  return scan_throw(NE);
}
	YY_BREAK
case 61:
YY_RULE_SETUP
{
  return scan_throw(LT);
}
	YY_BREAK
case 62:
YY_RULE_SETUP
{
  return scan_throw(GT);
}
	YY_BREAK
case 63:
YY_RULE_SETUP
{
  return scan_throw(LE);
}
	YY_BREAK
case 64:
YY_RULE_SETUP
{
  return scan_throw(GE);
}
	YY_BREAK
case 65:
YY_RULE_SETUP
{
  return scan_throw(ASSIGN);
 }
	YY_BREAK
case 66:
YY_RULE_SETUP
{
  DEBUG("yy_push_state(MATRIX)");
  yy_push_state(MATRIX);
  paren_levels.push(0);
  ParserSingleInstance::pushControlStatus(Parser::WithinMatrix);
  return scan_throw(LBRACK);
}
	YY_BREAK
case 67:
YY_RULE_SETUP
{
  return scan_throw(RBRACK);
}
	YY_BREAK
case 68:
YY_RULE_SETUP
{
  return scan_throw(DOT);
}
	YY_BREAK
case 69:
YY_RULE_SETUP
{
    ParserSingleInstance::pushControlStatus(Parser::WithinDots);
    yy_push_state(LINEBREAK);
}
	YY_BREAK
case 70:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] INTEGER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(VARINT);
}
	YY_BREAK
case 71:
YY_RULE_SETUP
{
  scan_exponent_convert(yytext);
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 72:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] FLOATING : " << yytext << std::endl;
#endif
  //scan_step();
  return scan_throw(VARFLOAT);
}
	YY_BREAK
case 73:
*yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
(yy_c_buf_p) = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
{

  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER WITH DOT AS LAST CHARACTER : " << yytext << std::endl;
#endif
//  scan_step();
  unput('.');
  yylloc.last_column--;
  return scan_throw(NUM);
}
	YY_BREAK
case 74:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] NUMBER : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 75:
YY_RULE_SETUP
{
  yylval.number = atof(yytext);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] LITTLE : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(NUM);
}
	YY_BREAK
case 76:
YY_RULE_SETUP
{
    wchar_t *pwText = to_wide_string(yytext);
    if (yytext != NULL && pwText == NULL)
    {
	std::string str = "Can\'t convert \'";
	str += yytext;
	str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwText);
    FREE(pwText);
#ifdef TOKENDEV
  std::cout << "--> [DEBUG] ID : " << yytext << std::endl;
#endif
//  scan_step();
  return scan_throw(ID);
}
	YY_BREAK
case 77:
YY_RULE_SETUP
{
    yyerror("syntax error, unexpected identifier, expecting end of file");
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK
case 78:
YY_RULE_SETUP
{
  yylval.comment = new std::wstring();
  comment_level = 1;
  ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
  yy_push_state(REGIONCOMMENT);
}
	YY_BREAK
case 79:
YY_RULE_SETUP
{
  pstBuffer.clear();
  yy_push_state(LINECOMMENT);
}
	YY_BREAK
case 80:
YY_RULE_SETUP
{
  pstBuffer.clear();
  str_opener_column = yylloc.first_column;
  yy_push_state(DOUBLESTRING);
}
	YY_BREAK
case 81:
YY_RULE_SETUP
{
  /*
  ** Matrix Transposition special behaviour
  ** ID' []' toto()' are transposition call
  */
  if (last_token == ID
      || last_token == RBRACK
      || last_token == RPAREN
      || last_token == RBRACE
      || last_token == VARINT
      || last_token == VARFLOAT
      || last_token == NUM
      || last_token == BOOLTRUE
      || last_token == BOOLFALSE)
  {
      return scan_throw(QUOTE);
  }
  else
  {
      pstBuffer.clear();
      str_opener_column = yylloc.first_column;
      yy_push_state(SIMPLESTRING);
  }
}
	YY_BREAK
case 82:
YY_RULE_SETUP
{
        scan_step();
}
	YY_BREAK
case 83:
/* rule 83 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL) {
      return scan_throw(EOL);
  }

}
	YY_BREAK
case 84:
/* rule 84 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 1;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 85:
/* rule 85 can match eol */
YY_RULE_SETUP
{
  yylloc.last_line += 2;
  yylloc.last_column = 1;
  scan_step();
  if (last_token != EOL)
  {
      return scan_throw(EOL);
  }
  scan_throw(EOL);
}
	YY_BREAK
case 86:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\'";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
}
	YY_BREAK

case 87:
YY_RULE_SETUP
{
    ++paren_levels.top();
    return scan_throw(LPAREN);
  }
	YY_BREAK
case 88:
YY_RULE_SETUP
{
    --paren_levels.top();
    return scan_throw(RPAREN);
  }
	YY_BREAK
case 89:
YY_RULE_SETUP
{
      unput(yytext[yyleng - 1]);
      --yylloc.last_column;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE
          || last_token == VARINT
          || last_token == VARFLOAT
          || last_token == NUM)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 90:
YY_RULE_SETUP
{
      return scan_throw(COLON);
  }
	YY_BREAK
case 91:
/* rule 91 can match eol */
YY_RULE_SETUP
{
      yylloc.last_line += 1;
      yylloc.last_column = 1;
      scan_step();
      if(last_token != DOTS && last_token != EOL)
      {
          return scan_throw(EOL);
      }
      scan_throw(EOL);
  }
	YY_BREAK
case 92:
YY_RULE_SETUP
{
      unput('\'');
      yylloc.last_column--;
      if (last_token == ID
          || last_token == RPAREN
          || last_token == QUOTE)
      {
          return scan_throw(COMMA);
      }
  }
	YY_BREAK
case 93:
YY_RULE_SETUP
{
    DEBUG("yy_pop_state()");
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACK);
  }
	YY_BREAK
case 94:
YY_RULE_SETUP
{
    yy_pop_state();
    paren_levels.pop();
    ParserSingleInstance::popControlStatus();
    return scan_throw(RBRACE);
  }
	YY_BREAK
case 95:
case 96:
YY_RULE_SETUP
{
    // _+_ is always meaning a PLUS token
    // + alone is a plus if and only if it does not
    // fall into the {spaces}{plus} rule (in matrices space is coding)
    // as Flex is greedy the {plus} rule is only applied
    // if no {spaces}{plus} is found
    // Examples:
    // ========
    // [1 + 2 3] must be understood as [(1+2), 3]
    // [1 +2 3] must be understood as [1, 2, 3]
    // [1 +...
    // 2] must be understood as [(1+2)]
    return scan_throw(PLUS);
  }
	YY_BREAK
case 97:
case 98:
YY_RULE_SETUP
{
    // _-_ is always meaning a MINUS token
    // - alone is a MINUS only if and only if it does not
    // fall into the {spaces}{minus} rule (in matrices space is coding)
    // as Flex is greedy the {minus} rule is only applied
    // if no {spaces}{minus} is found
    // Examples:
    // ========
    // [1 - 2 3] must be understood as [(1-2), 3]
    // [1 -2 3] must be understood as [1, -2, 3]
    // [1 -...
    // 2] must be understood as [(1-2)]
    return scan_throw(MINUS);
  }
	YY_BREAK
case 99:
YY_RULE_SETUP
{
    // This rule is made to take into account the coding spaces in matrices.
    // It is important to distinguish between a space coding a matrix column separator
    // and a simple non coding space around the PLUS operator
    // Examples
    // ========
    // [a + b] == [(a + b)]
    // but [a +b] == [a, +b] and plus here is unary and is not removed, as unary plus
    // is not necessary defined for all data types (https://gitlab.com/scilab/scilab/-/issues/15850)
    // A priori, the space *is* coding

    unput('+');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
      && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 100:
YY_RULE_SETUP
{
    // See {spaces}{plus} rule for the rationale

    unput('-');
    yylloc.last_column--;
    if (last_token != LBRACK
       && last_token != EOL
       && last_token != SEMI
       && last_token != COMMA
       && last_token != DOTTIMES
       && last_token != DOTRDIVIDE
       && last_token != DOTLDIVIDE
       && last_token != DOTPOWER
       && last_token != MINUS
       && last_token != PLUS
       && last_token != TIMES
       && last_token != RDIVIDE
       && last_token != LDIVIDE
       && last_token != POWER
       && last_token != KRONTIMES
       && last_token != KRONRDIVIDE
       && last_token != KRONLDIVIDE
       && last_token != EQ
       && last_token != NE
       && last_token != LT
       && last_token != GT
       && last_token != LE
       && last_token != GE
       && paren_levels.top() == 0)
   {
       return scan_throw(COMMA);
   }
  }
	YY_BREAK
case 101:
YY_RULE_SETUP
{
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' within a matrix.";
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
/* {next} rules
   * ============
   * Scilab can perform a line continuation with the ..
   * In matrices as space may be coding extra care must be taken when parsing {next}
   * Some states must be preserved to parse next line and to revert to a proper state
   * after the ... // comments or ... \/* comments *\/
   */
case 102:
YY_RULE_SETUP
{
             // This rule is made to take into account a +... without spaces after plus
             // if one simply ignores the next a situation like this could arise
             // Example
             // =======
             // A = [1 +...
             // 2] 
             //
             // what is meant by the user [1 +2] ? or [1 + 2]
             // simply ignoring the ... would yield the 1st situation [1, 2]
             // We consider this is NOT proper and instead that the user meant a binary plus
             // split is two lines
             // The same rationale applies to minus.

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = PLUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(PLUS);
         }
	YY_BREAK
case 103:
YY_RULE_SETUP
{
             // see {spaces}*{minus}{next} for the rationale

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = MINUS; // keep last token to restore
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
             return scan_throw(MINUS);
         }
	YY_BREAK
case 104:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = FALSE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case 105:
YY_RULE_SETUP
{
             // Store the state of the previously scanned token for next rule
             // Only considerations of coding spaces is important for the parser

             linebreak_stored_space = TRUE; // no spaces before ...
             linebreak_stored_token = last_token; // keep last token to restore state
             ParserSingleInstance::pushControlStatus(Parser::WithinDots);
             yy_push_state(LINEBREAK);
         }
	YY_BREAK
case YY_STATE_EOF(MATRIX):
{
      yy_pop_state();
      paren_levels.pop();
  }
	YY_BREAK

case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    last_token = linebreak_stored_token;
    if (linebreak_stored_space)
    {
        // This is important to restore coding spaces as if ... was not present
        unput(' ');
        linebreak_stored_space = FALSE;
    }
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
  }
	YY_BREAK
case 107:
YY_RULE_SETUP
{
    yylval.comment = new std::wstring();
    comment_level = 1;
    ParserSingleInstance::pushControlStatus(Parser::WithinBlockComment);
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 108:
YY_RULE_SETUP
{
    scan_throw(DOTS);
    pstBuffer.clear();
    yy_push_state(LINECOMMENT);
  }
	YY_BREAK
case 109:
YY_RULE_SETUP
{
      /* Do nothing... */
  }
	YY_BREAK
case YY_STATE_EOF(LINEBREAK):
{
      yy_pop_state();
  }
	YY_BREAK
case 110:
YY_RULE_SETUP
{
    // The following case is not handled by the parser
    // a line of code ... /* some multiline
    // comments */ continued here;
    // without the special case telling we are after comments
    // will generate the error as follows:

    // Any characters after ... yields to an error
    std::string str = "Unexpected token \'";
    str += yytext;
    str += "\' after line break with .. or ...";
    yy_pop_state();
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror(str);
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK

case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
{
    //yylloc.last_line += 1;
    //yylloc.last_column = 1;
    //scan_step();
    yy_pop_state();
    // loop to manage \n and \r\n
    for (int i = yyleng - 1 ; i >= 0 ; --i)
    {
        //std::cerr << "Unputting i = {" << i << "}" << std::endl;
        //std::cerr << "Unputting {" << yytext[i] << "}" << std::endl;
        unput(yytext[i]);
        yylloc.last_column--;
    }
    // yylloc.first_column is the location of the {newline}
    // remove the size of the comment to have proper location 
    // as for <<EOF>> '//' is not part of the comment location
    yylloc.first_column -= pstBuffer.length();
    
    /*
    ** To forgot comments after lines break
    */
    if (last_token != DOTS)
    {
      //std::cerr << "pstBuffer = {" << *pstBuffer << "}" << std::endl;
      //std::cerr << "pstBuffer->c_str() = {" << pstBuffer->c_str() << "}" << std::endl;
      wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
      //std::wcerr << L"pwstBuffer = W{" << pwstBuffer << L"}" << std::endl;
      if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
      {
        pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
        BEGIN(INITIAL);
        yyerror(str);
        return scan_throw(FLEX_ERROR);
      }
      yylval.comment = new std::wstring(pwstBuffer);
      pstBuffer.clear();
      FREE (pwstBuffer);
      return scan_throw(COMMENT);
    }
    else
    {
	    pstBuffer.clear();
    }
  }
	YY_BREAK
case YY_STATE_EOF(LINECOMMENT):
{
    yy_pop_state();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
      pstBuffer.clear();
      std::string str = "Can\'t convert \'";
      str += pstBuffer.c_str();
      str += "\' to UTF-8";
      BEGIN(INITIAL);
      yyerror(str);
      return scan_throw(FLEX_ERROR);
    }
    yylval.comment = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE (pwstBuffer);
    return scan_throw(COMMENT);
  }
	YY_BREAK
case 112:
YY_RULE_SETUP
{
      // Put the char in a temporary CHAR buffer to go through UTF-8 trouble
      // only translate to WCHAR_T when popping state.
      pstBuffer += yytext;
  }
	YY_BREAK

case 113:
YY_RULE_SETUP
{
    --comment_level;
    if (comment_level == 0) {
      ParserSingleInstance::popControlStatus();
      yy_pop_state();
      //return scan_throw(BLOCKCOMMENT);
    }
  }
	YY_BREAK
case 114:
YY_RULE_SETUP
{
    ++comment_level;
    yy_push_state(REGIONCOMMENT);
  }
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
{
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    scan_step();
    *yylval.comment += L"\n";
  }
	YY_BREAK
case 116:
case 117:
YY_RULE_SETUP
{
      wchar_t *pwText = to_wide_string(yytext);
      *yylval.comment += std::wstring(pwText);
      FREE(pwText);
  }
	YY_BREAK
case YY_STATE_EOF(REGIONCOMMENT):
{
      yy_pop_state();
//    std::string str = "unexpected end of file in a comment";
//    scan_error(str);
  }
	YY_BREAK

case 118:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 119:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 120:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 121:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 122:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
	std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 123:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \' and ending with \".");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 124:
/* rule 124 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    BEGIN(INITIAL);
    ParserSingleInstance::popControlStatus();
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(SIMPLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 125:
case 126:
YY_RULE_SETUP
{
    //scan_step();
    pstBuffer += yytext;
  }
	YY_BREAK

case 127:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 128:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 129:
YY_RULE_SETUP
{
    pstBuffer += "\"";
  }
	YY_BREAK
case 130:
YY_RULE_SETUP
{
    pstBuffer += "'";
  }
	YY_BREAK
case 131:
YY_RULE_SETUP
{
    yy_pop_state();
    //scan_step();
    wchar_t *pwstBuffer = to_wide_string(pstBuffer.c_str());
    if (pstBuffer.c_str() != NULL && pwstBuffer == NULL)
    {
	pstBuffer.clear();
        std::string str = "Can\'t convert \'";
        str += pstBuffer.c_str();
        str += "\' to UTF-8";
	BEGIN(INITIAL);
	yyerror(str);
	return scan_throw(FLEX_ERROR);
    }
    yylval.str = new std::wstring(pwstBuffer);
    pstBuffer.clear();
    FREE(pwstBuffer);
    yylloc.first_column = str_opener_column;
    return scan_throw(STR);
  }
	YY_BREAK
case 132:
YY_RULE_SETUP
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Heterogeneous string detected, starting with \" and ending with \'.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 133:
/* rule 133 can match eol */
YY_RULE_SETUP
{
    pstBuffer.clear();
    yylloc.last_line += 1;
    yylloc.last_column = 1;
    ParserSingleInstance::popControlStatus();
    BEGIN(INITIAL);
    yyerror("Unexpected end of line in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case YY_STATE_EOF(DOUBLESTRING):
{
    pstBuffer.clear();
    BEGIN(INITIAL);
    yyerror("Unexpected end of file in a string.");
    return scan_throw(FLEX_ERROR);
  }
	YY_BREAK
case 134:
case 135:
YY_RULE_SETUP
{
   //scan_step();
   pstBuffer += yytext;
  }
	YY_BREAK

case 136:
YY_RULE_SETUP
{
        if (last_token == ID)
        {
            scan_throw(SPACES);
            //return ID;
        }
    }
	YY_BREAK
case 137:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(SEMI);
    }
	YY_BREAK
case 138:
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        scan_step();
        return scan_throw(COMMA);
    }
	YY_BREAK
case 139:
/* rule 139 can match eol */
YY_RULE_SETUP
{
        BEGIN(INITIAL);
        yylloc.last_line += 1;
        yylloc.last_column = 1;
        scan_step();
        return scan_throw(EOL);
    }
	YY_BREAK
case 140:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(ASSIGN);
        }
    }
	YY_BREAK
case 141:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LPAREN);
        }
    }
	YY_BREAK
case 142:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(LT);
        }
    }
	YY_BREAK
case 143:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(GT);
        }
    }
	YY_BREAK
case 144:
YY_RULE_SETUP
{
        if (last_token == STR || last_token == SPACES)
        {
	    wchar_t *pwText = to_wide_string(yytext);
            yylval.str = new std::wstring(pwText);
	    FREE(pwText);
            return scan_throw(STR);
        }
        else
        {
            BEGIN(INITIAL);
            return scan_throw(NOT);
        }
    }
	YY_BREAK
case 145:
YY_RULE_SETUP
{
	wchar_t *pwText = to_wide_string(yytext);
        yylval.str = new std::wstring(pwText);
	FREE(pwText);
        return scan_throw(STR);
    }
	YY_BREAK
case YY_STATE_EOF(SHELLMODE):
{
        BEGIN(INITIAL);
    }
	YY_BREAK

case 146:
YY_RULE_SETUP
ECHO;
	YY_BREAK
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BEGINID):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);
	yy_current_state += YY_AT_BOL();

	(yy_state_ptr) = (yy_state_buf);
	*(yy_state_ptr)++ = yy_current_state;

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 943 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		*(yy_state_ptr)++ = yy_current_state;
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    
	YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 943 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 942);
	if ( ! yy_is_jam )
		*(yy_state_ptr)++ = yy_current_state;

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

    (yy_state_buf) = 0;
    (yy_state_ptr) = 0;
    (yy_full_match) = 0;
    (yy_lp) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    yyfree ( (yy_state_buf) );
    (yy_state_buf)  = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

int scan_throw(int token) {
  last_token = token;
#ifdef DEV
  std::cout << "--> [DEBUG] TOKEN : " << token << " - " << token_to_string(token) << std::endl;
#endif
  return token;
}

int get_last_token() {
    return last_token;
}

void scan_step() {
  yylloc.first_line = yylloc.last_line;
  yylloc.first_column = yylloc.last_column;
}

/*
** convert floating numbers to C standard
** 1.2d-3 -> 1.2e-3
** 1.2D-3 -> 1.2e-3
*/
void scan_exponent_convert(char *in)
{
  for (; *in != 'd' && *in != 'D'; ++in);
  *in = 'e';
}

#ifdef _MSC_VER
int isatty (int desc)
{
  return 0;
}
#endif

#ifdef DEV
std::string token_to_string(int token)
{
    std::string str;
    switch(token)
    {
        case AND :                   str = "AND";
                                     break;
        case ASSIGN :                str = "ASSIGN";
                                     break;
        case BOOLFALSE :             str = "BOOLFALSE";
                                     break;
        case BOOLTRUE :              str = "BOOLTRUE";
                                     break;
        case BREAK :                 str = "BREAK";
                                     break;
        case CASE :                  str = "CASE";
                                     break;
        case CATCH :                 str = "CATCH";
                                     break;
        case COLON :                 str = "COLON";
                                     break;
        case COMMA :                 str = "COMMA";
                                     break;
        case COMMENT :               str = "COMMENT";
                                     break;
        case CONTINUE :              str = "CONTINUE";
                                     break;
        case CONTROLLDIVIDE :        str = "CONTROLLDIVIDE";
                                     break;
        case CONTROLRDIVIDE :        str = "CONTROLRDIVIDE";
                                     break;
        case CONTROLTIMES :          str = "CONTROLTIMES";
                                     break;
        case DO :                    str = "DO";
                                     break;
        case DOLLAR :                str = "DOLLAR";
                                     break;
        case DOT :                   str = "DOT";
                                     break;
        case DOTLDIVIDE :            str = "DOTLDIVIDE";
                                     break;
        case DOTPOWER :              str = "DOTPOWER";
                                     break;
        case DOTQUOTE :              str = "DOTQUOTE";
                                     break;
        case DOTRDIVIDE :            str = "DOTRDIVIDE";
                                     break;
        case DOTS :                  str = "DOTS";
                                     break;
        case DOTTIMES :              str = "DOTTIMES";
                                     break;
        case ELSE :                  str = "ELSE";
                                     break;
        case ELSEIF :                str = "ELSEIF";
                                     break;
        case END :                   str = "END";
                                     break;
        case ENDFUNCTION :           str = "ENDFUNCTION";
                                     break;
        case EOL :                   str = "EOL";
                                     break;
        case EQ :                    str = "EQ";
                                     break;
        case FLEX_ERROR :            str = "FLEX_ERROR";
                                     break;
        case FOR :                   str = "FOR";
                                     break;
        case FUNCTION :              str = "FUNCTION";
                                     break;
        case GE :                    str = "GE";
                                     break;
        case GT :                    str = "GT";
                                     break;
        case ID :                    str = "ID";
                                     break;
        case IF :                    str = "IF";
                                     break;
        case KRONLDIVIDE :           str = "KRONLDIVIDE";
                                     break;
        case KRONRDIVIDE :           str = "KRONRDIVIDE";
                                     break;
        case KRONTIMES :             str = "KRONTIMES";
                                     break;
        case LBRACE :                str = "LBRACE";
                                     break;
        case LBRACK :                str = "LBRACK";
                                     break;
        case LDIVIDE :               str = "LDIVIDE";
                                     break;
        case LE :                    str = "LE";
                                     break;
        case LPAREN :                str = "LPAREN";
                                     break;
        case LT :                    str = "LT";
                                     break;
        case MINUS :                 str = "MINUS";
                                     break;
        case NE :                    str = "NE";
                                     break;
        case NOT :                   str = "NOT";
                                     break;
        case NUM :                   str = "NUM";
                                     break;
        case OR :                    str = "OR";
                                     break;
        case OROR :                  str = "OROR";
                                     break;
        case OTHERWISE :             str = "OTHERWISE";
                                     break;
        case PLUS :                  str = "PLUS";
                                     break;
        case POWER :                 str = "POWER";
                                     break;
        case QUOTE :                 str = "QUOTE";
                                     break;
        case RBRACE :                str = "RBRACE";
                                     break;
        case RBRACK :                str = "RBRACK";
                                     break;
        case RDIVIDE :               str = "RDIVIDE";
                                     break;
        case RETURN :                str = "RETURN";
                                     break;
        case RPAREN :                str = "RPAREN";
                                     break;
        case SELECT :                str = "SELECT";
                                     break;
        case SEMI :                  str = "SEMI";
                                     break;
        case SPACES :                str = "SPACES";
                                     break;
        case STR :                   str = "STR";
                                     break;
        case SWITCH :                str = "SWITCH";
                                     break;
        case THEN :                  str = "THEN";
                                     break;
        case TIMES :                 str = "TIMES";
                                     break;
        case TRY :                   str = "TRY";
                                     break;
        case VARFLOAT :              str = "VARFLOAT";
                                     break;
        case VARINT :                str = "VARINT";
                                     break;
        case WHILE :                 str = "WHILE";
                                     break;
        default :                    str = "UNKNOWN";
                                     break;
    }
    return str;

}
#endif

