# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) Dassault Systemes - 2022 - Clement DAVID
# Copyright (C) Dassault Systemes - 2022 - Cedric DELAMARRE

stages:
  # fetch prebuild libraries maintained in different repository
  - prebuild
  # build scilab
  - build
  # run the tests
  - test
  # extract some content
  - postbuild
  # publish and make it available to the community
  - publish

variables:
  GIT_DEPTH:
    value: "1"
    description: "speedup cloning, only fetch the latest commit"
  PREREQUIREMENTS_BRANCH:
    value: "branches/6.1"
    description: "Scilab prerequirements branch name or trunk"
  DOCKER_LINUX_BUILDER: "$CI_REGISTRY_IMAGE/linux-builder:latest"

# only run on merge request
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: &DOCKER_CHANGES
        paths:
          - .gitlab-ci/Dockerfile*
      variables:
        DOCKER_LINUX_BUILDER: "$CI_REGISTRY_IMAGE/linux-builder:$CI_MERGE_REQUEST_ID"
        SCI_VERSION_STRING: "scilab-branch-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
        GIT_STRATEGY: fetch
        GIT_CLEAN_FLAGS: none
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        # use CI_MERGE_REQUEST_TARGET_BRANCH_NAME for the name
        SCI_VERSION_STRING: "scilab-branch-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
        GIT_STRATEGY: fetch
        GIT_CLEAN_FLAGS: none
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      variables:
        SCI_VERSION_STRING: "scilab-branch-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
        GIT_STRATEGY: clone
    - if: $CI_COMMIT_REF_PROTECTED
    - if: $CI_COMMIT_TAG
      variables:
        SCI_VERSION_STRING: "scilab-${CI_COMMIT_TAG}"
        GIT_STRATEGY: clone
    - if: $CI_MERGE_REQUEST_APPROVED
      changes: *DOCKER_CHANGES
      variables:
        GIT_STRATEGY: fetch

default:
  artifacts:
    expire_in: 1 day

include:
  # updating files and runner states
  - local: .gitlab-ci/prebuild.yml
  # build
  - local: .gitlab-ci/build.yml
  # execute tests
  - local: .gitlab-ci/test.yml
  # sign and extract useful content
  - local: .gitlab-ci/postbuild.yml
  # deploy/publish a binary
  - local: .gitlab-ci/publish.yml

## .pre: started before everything but only if a pipeline is scheduled
# Manage Docker build
create_docker_image_linux:
  stage: .pre
  image: docker:20.10.16
  tags: [x86_64-linux-gnu, docker, scilab]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --file .gitlab-ci/Dockerfile.linux -t $DOCKER_LINUX_BUILDER .
    - docker push $DOCKER_LINUX_BUILDER
  rules:
    - if: $CI_MERGE_REQUEST_APPROVED
      changes: *DOCKER_CHANGES
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes: *DOCKER_CHANGES
# create_docker_image_windows:
#   stage: .pre
#   tags: [x64_windows, shell, scilab]
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker build --memory 4GB --file .gitlab-ci/Dockerfile.windows -t $CI_REGISTRY_IMAGE/windows-builder:latest .
#     - docker push $CI_REGISTRY_IMAGE/windows-builder
#     - docker logout $CI_REGISTRY
#   rules:
#     - if: $CI_MERGE_REQUEST_APPROVED
#       changes: *DOCKER_CHANGES
#     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
#       changes: *DOCKER_CHANGES

## .post: started after everything but only if a pipeline is scheduled
# cleanup windows runners
# Note: will not work with concurrent jobs > 1 and more than one runner
# use parallel matrix to launch the job on multiple runners and concurrent jobs
# to clean .../runner_tag/concurrent_id/ folders
# parallel:
#   matrix:
#     - RUNNER: xxx
#       CONCURRENT: [1, 2, 3, 4]
#   tags:
#     - $RUNNER-$CONCURRENT

windows_cleanup_shell:
  # extends: .docker-image-windows
  stage: .post
  tags: [x64_windows, shell, scilab]
  # dont download artifacts
  dependencies:
    - x64_windows_set_env
  variables:
    GIT_STRATEGY: none
  script:
    # Remove installer
    - Remove-Item "$env:SCI_VERSION_STRING-$env:ARCH.exe"
    # Remove install dir
    - Remove-Item -Recurse "$env:SCI_VERSION_STRING"
    # Remove logs
    - Remove-Item -Recurse "logs_$env:CI_COMMIT_SHORT_SHA"
    # Remove TMPDIRs older than 1 day
    - Get-ChildItem â€“Path "$env:TMP\SCI_TMP*" -Recurse | Where-Object {($_.LastWriteTime -lt (Get-Date).AddDays(-1))} | Remove-Item

linux_cleanup_docker:
  stage: .post
  image: docker:20.10.16
  tags: [x86_64-linux-gnu, docker, scilab]
  dependencies: []
  variables:
    GIT_STRATEGY: none
  script:
    - echo $DOCKER_LINUX_BUILDER
    # untag the dedicated image for this MR
    - docker rmi $DOCKER_LINUX_BUILDER
    # remove all dangling image
    - docker image prune
  rules:
    # cleanup temporary image after MR approuved
    - if: $CI_MERGE_REQUEST_APPROVED
      changes: *DOCKER_CHANGES
