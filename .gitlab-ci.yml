stages:
  # fetch prebuild libraries maintained in different repository
  - prebuild
  # build scilab
  - build
  # create a binary installer and binary patch
  - postbuild
  # run the tests
  - tests
  # publish and make it available to the community
  - deploy


variables:
  # speedup cloning
  GIT_DEPTH: "1"


# only run on merge request or default branch push or initial-ci
workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_COMMIT_BRANCH == "initial-ci"


# create docker images for builders 
before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build -t $CI_REGISTRY/scilab/scilab:builder_linux - < /.gitlab-ci/Dockerfile.linux
  - docker push $CI_REGISTRY/scilab/scilab:builder_linux
# Docker windows not supported yet
#  - docker build -t $CI_REGISTRY/scilab/scilab:builder_windows - < /.gitlab-ci/Dockerfile.windows
#  - docker push $CI_REGISTRY/scilab/scilab:builder_windows

include:
  # dependencies cache
  - local: /.gitlab-ci/prebuild.yml
  # build
  - local: /.gitlab-ci/build.yml
  # patches
  - local: /.gitlab-ci/postbuild.yml
  # execute tests on merge
  - local: /.gitlab-ci/tests.yml
    rules:
      - if: $CI_PIPELINE_SOURCE == "push"
  # deploy a binary on merge
  - local: /.gitlab-ci/deploy.yml
    rules:
      - if: $CI_PIPELINE_SOURCE == "push"
