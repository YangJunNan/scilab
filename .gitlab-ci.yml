# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) Dassault Systemes - 2022 - Clement DAVID
# Copyright (C) Dassault Systemes - 2022 - Cedric DELAMARRE

stages:
  # refresh the Docker image
  - docker_create
  # define common env variables used to build and tests
  - prebuild
  # build scilab
  - build
  # run the tests
  - test
  # extract some content
  - postbuild
  # publish and make it available to the community
  - publish
  # update/cleanup Docker image
  - docker_cleanup

variables:
  GIT_STRATEGY:
    value: "fetch"
    description: "fastest strategy as it re-uses the local working copy"
  GIT_CLEAN_FLAGS:
    value: "none"
    description: "do clean build, each job should clean previous artifacts at startup"
  GIT_DEPTH:
    value: "1"
    description: "speedup cloning, only fetch the latest commit"
  PREREQUIREMENTS_BRANCH:
    value: "branches/6.1"
    description: "Scilab prerequirements branch name or trunk"
  DOCKER_LINUX_BUILDER:
    value: "registry.gitlab.com/scilab/scilab/linux-builder"
    description: "Docker image used to build Scilab on Linux"
  DOCKER_WINDOWS_BUILDER:
    value: "registry.gitlab.com/scilab/scilab/windows-builder"
    description: "Docker image used to build Scilab on Windows"

workflow:
  rules:
    # Run on contributor's fork
    - if: $CI_PROJECT_PATH_SLUG !~ /scilab-scilab/
      changes: &DOCKER_CHANGES
        paths:
          - .gitlab-ci/Dockerfile*
      variables:
        SCI_VERSION_STRING: "$CI_PROJECT_PATH_SLUG-branch-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
        DOCKER_LINUX_BUILDER: "$CI_REGISTRY_IMAGE/linux-builder:$CI_MERGE_REQUEST_ID"
        DOCKER_WINDOWS_BUILDER: "$CI_REGISTRY_IMAGE/windows-builder:$CI_MERGE_REQUEST_ID"
    - if: $CI_PROJECT_PATH_SLUG !~ /scilab-scilab/
      variables:
        SCI_VERSION_STRING: "$CI_PROJECT_PATH_SLUG-branch-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
    # run on merge request and set specific docker image tag
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes: *DOCKER_CHANGES
      variables:
        SCI_VERSION_STRING: "scilab-branch-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
        DOCKER_LINUX_BUILDER: "$CI_REGISTRY_IMAGE/linux-builder:$CI_MERGE_REQUEST_ID"
        DOCKER_WINDOWS_BUILDER: "$CI_REGISTRY_IMAGE/windows-builder:$CI_MERGE_REQUEST_ID"
    # run on merge request
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      variables:
        SCI_VERSION_STRING: "scilab-branch-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
    # Scheduled pipeline
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      variables:
        SCI_VERSION_STRING: "scilab-branch-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
        GIT_STRATEGY: clone
        GIT_CLEAN_FLAGS: -fxd
    # Release
    - if: $CI_COMMIT_TAG
      variables:
        SCI_VERSION_STRING: "scilab-${CI_COMMIT_TAG}"
        GIT_STRATEGY: clone
        GIT_CLEAN_FLAGS: -fxd
    # Update default Docker image on merge
    - if: $CI_MERGE_REQUEST_APPROVED
      changes: *DOCKER_CHANGES
      variables:
        DOCKER_LINUX_BUILDER: "$CI_REGISTRY_IMAGE/linux-builder:latest"
        DOCKER_WINDOWS_BUILDER: "$CI_REGISTRY_IMAGE/windows-builder:latest"

default:
  artifacts:
    expire_in: 1 day

include:
  # Setup Docker
  - local: .gitlab-ci/docker_setup.yml
  # updating files and runner states
  - local: .gitlab-ci/prebuild.yml
  # build
  - local: .gitlab-ci/build.yml
  # execute tests
  - local: .gitlab-ci/test.yml
  # sign and extract useful content
  - local: .gitlab-ci/postbuild.yml
  # deploy/publish a binary
  - local: .gitlab-ci/publish.yml
