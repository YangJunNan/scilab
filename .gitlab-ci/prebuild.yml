# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) Dassault Systemes - 2022 - Clement DAVID
# Copyright (C) Dassault Systemes - 2022 - Cedric DELAMARRE
#
#
# This YAML file describe the prebuild stage of the CI. This stage is used to
# cleanup runners and set them ready to build.
#

create_docker_image_linux:
  stage: .pre
  image: docker:20.10.16
  tags: [x86_64-linux-gnu, docker, scilab]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --file .gitlab-ci/Dockerfile.linux -t $DOCKER_LINUX_BUILDER .
    - docker push $DOCKER_LINUX_BUILDER
  rules:
    - if: CI_MERGE_REQUEST_APPROVED
      changes: *DOCKER_CHANGES
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      changes: *DOCKER_CHANGES

# create_docker_image_windows:
#   stage: .pre
#   tags: [x64_windows, shell, scilab]
#   script:
#     - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
#     - docker build --memory 4GB --file .gitlab-ci/Dockerfile.windows -t $CI_REGISTRY_IMAGE/windows-builder:latest .
#     - docker push $CI_REGISTRY_IMAGE/windows-builder
#     - docker logout $CI_REGISTRY
#   rules:
#     - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
#       changes:
#         paths:
#           - .gitlab-ci/Dockerfile.windows

# define x86_64-linux-gnu env variables
.x86_64-linux-gnu_set_env:
  image: $DOCKER_LINUX_BUILDER
  stage: prebuild
  tags: [x86_64-linux-gnu, docker, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    - set -e
    - set -x
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_BRANCH
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # get current build machine architecture
    - ARCH=$(cc -dumpmachine)
    # define NOW as Gitlab display ISO 8601 timestamp
    - date +"%s" >timestamp
    - NOW=$(cat timestamp)
    # export useful variables
    - echo ARCH=$ARCH                              >build.env
    - echo SCI_VERSION_STRING=$SCI_VERSION_STRING >>build.env
    - echo SCI_VERSION_TIMESTAMP=$NOW             >>build.env
  artifacts:
    reports:
      dotenv: build.env

# define x64 windows env
x64_windows_set_env:
  # extends: .docker-image-windows
  stage: prebuild
  tags: [x64_windows, shell, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    - echo $env:CI_COMMIT_TAG
    - echo $env:CI_COMMIT_BRANCH
    - echo $env:CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - |
      [System.Environment]::SetEnvironmentVariable('NOW', [int](Get-Date(Get-Date).ToUniversalTime() -uformat '%s'))
    - Add-Content -Path build.env -Value "ARCH=x64"
    - Add-Content -Path build.env -Value "SCI_VERSION_STRING=$env:SCI_VERSION_STRING"
    - Add-Content -Path build.env -Value "SCI_VERSION_TIMESTAMP=$env:NOW"
  artifacts:
    reports:
      dotenv: build.env

# manual clean
.git_clean:
  stage: prebuild
  tags: [scilab]
  variables:
    GIT_CLEAN_FLAGS: -fxd
  script: echo "git clean succeeded"
  when: manual
x86_64-linux-gnu_clean:
  extends: .git_clean
  tags: [x86_64-linux-gnu]
x64_windows_clean:
  extends: .git_clean
  tags: [x64_windows]

# patch, copy, modify files before building a release
prepare_release_files:
  image: $DOCKER_LINUX_BUILDER
  stage: prebuild
  tags: [x86_64-linux-gnu]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "FIXME should patch version numbers against tag"
  artifacts:
    paths:
      - scilab/modules/core/includes/version.h.vc
      - scilab/modules/core/includes/version.h.in

# check MR has modified CHANGES.md
contains_changes_modification:
  image: $DOCKER_LINUX_BUILDER
  stage: prebuild
  tags: [x86_64-linux-gnu]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - id
    - env
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes:
        - scilab/CHANGES.md
  allow_failure: true
