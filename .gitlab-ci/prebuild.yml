# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) Dassault Systemes - 2022 - Clement DAVID
# Copyright (C) Dassault Systemes - 2022 - Cedric DELAMARRE
#
#
# This YAML file describe the prebuild stage of the CI. This stage is used to
# cleanup runners and set them ready to build.
#

# define x86_64-linux-gnu env variables
.x86_64-linux-gnu_set_env:
  image: $DOCKER_LINUX_BUILDER
  stage: prebuild
  tags: [x86_64-linux-gnu, docker, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    - echo CI_COMMIT_TAG=$CI_COMMIT_TAG
    - echo CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
    - echo CI_MERGE_REQUEST_TARGET_BRANCH_NAME=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # get current build machine architecture
    - ARCH=$(cc -dumpmachine)
    # define NOW as Gitlab display ISO 8601 timestamp
    - date +"%s" >timestamp
    - NOW=$(cat timestamp)
    # export useful variables
    - |
      echo ARCH=$ARCH                             >build.env
      echo SCI_VERSION_TIMESTAMP=$NOW             >>build.env
      cat build.env
    - echo SCI_VERSION_STRING=$SCI_VERSION_STRING
  artifacts:
    reports:
      dotenv: build.env

# define x64 windows env
x64_windows_set_env:
  stage: prebuild
  tags: [x64_windows, shell, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    - echo CI_COMMIT_TAG=$env:CI_COMMIT_TAG
    - echo CI_COMMIT_BRANCH=$env:CI_COMMIT_BRANCH
    - echo CI_MERGE_REQUEST_TARGET_BRANCH_NAME=$env:CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - |
      [System.Environment]::SetEnvironmentVariable('NOW', [int](Get-Date(Get-Date).ToUniversalTime() -uformat '%s'))
      Set-Content -Path build.env -Value "ARCH=x64","SCI_VERSION_TIMESTAMP=$env:NOW"
      cat build.env
    - echo SCI_VERSION_STRING=$env:SCI_VERSION_STRING
  artifacts:
    reports:
      dotenv: build.env

# patch, copy, modify files before building a release
prepare_release_files:
  image: $DOCKER_LINUX_BUILDER
  stage: prebuild
  tags: [x86_64-linux-gnu]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "FIXME should patch version numbers against tag"
  artifacts:
    paths:
      - scilab/modules/core/includes/version.h.vc
      - scilab/modules/core/includes/version.h.in

# check MR has modified CHANGES.md
CHANGES_has_no_edit:
  stage: prebuild
  tags: [scilab]
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - scilab/CHANGES.md
      variables:
        STATUS: 0
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
      variables:
        STATUS: 1
# on forks, always trigger a warning as we have no source branch to compare to
    - allow_failure: true
      variables:
        STATUS: 1
  script:
    - echo "$STATUS"
    - exit $STATUS


.x86_64-linux-gnu_manual_clean_build:
  image: $DOCKER_LINUX_BUILDER
  stage: prebuild
  tags: [x86_64-linux-gnu, docker, scilab]
  when: manual
  variables:
    GIT_STRATEGY: none
  script:
    - echo CI_COMMIT_TAG=$CI_COMMIT_TAG
    - echo CI_COMMIT_BRANCH=$CI_COMMIT_BRANCH
    - echo CI_MERGE_REQUEST_TARGET_BRANCH_NAME=$CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # get current build machine architecture
    - ARCH=$(cc -dumpmachine)
    # define NOW as Gitlab display ISO 8601 timestamp
    - date +"%s" >timestamp
    - NOW=$(cat timestamp)
    # export useful variables
    - |
      echo ARCH=$ARCH                             >build.env
      echo SCI_VERSION_TIMESTAMP=$NOW             >>build.env
      echo GIT_CLEAN_FLAGS=-fxd                   >>build.env
      cat build.env
    - echo SCI_VERSION_STRING=$SCI_VERSION_STRING
  artifacts:
    reports:
      dotenv: build.env

x64_windows_manual_clean_build:
  stage: prebuild
  tags: [x64_windows, shell, scilab]
  when: manual
  variables:
    GIT_STRATEGY: none
  needs: x64_windows_set_env
    - echo CI_COMMIT_TAG=$env:CI_COMMIT_TAG
    - echo CI_COMMIT_BRANCH=$env:CI_COMMIT_BRANCH
    - echo CI_MERGE_REQUEST_TARGET_BRANCH_NAME=$env:CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - |
      [System.Environment]::SetEnvironmentVariable('NOW', [int](Get-Date(Get-Date).ToUniversalTime() -uformat '%s'))
      Set-Content -Path build.env -Value "ARCH=x64","SCI_VERSION_TIMESTAMP=$env:NOW","GIT_CLEAN_FLAGS=-fxd"
      cat build.env
    - echo SCI_VERSION_STRING=$env:SCI_VERSION_STRING
  artifacts:
    reports:
      dotenv: build.env
