# create docker images for builders 
create_docker_image:
  stage: prebuild
  image: docker
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY/scilab/linux_runner:$CI_COMMIT_REF_SLUG - < /.gitlab-ci/Dockerfile.linux
    - docker push $CI_REGISTRY/scilab/linux_runner:$CI_COMMIT_REF_SLUG
# Docker windows not supported yet
#  - docker build -t $CI_REGISTRY/scilab/windows_runner:$CI_COMMIT_REF_SLUG - < /.gitlab-ci/Dockerfile.windows
#  - docker push $CI_REGISTRY/scilab/windows_runner:$CI_COMMIT_REF_SLUG
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - .gitlab-ci/Dockerfile*


# cleanup old builds from runners
cleanup_old_linux_builds:
  stage: prebuild
  tags:
    - x86_64-linux-gnu
    - scilab
  variables:
      GIT_STRATEGY: none
  script:
    - set -e -x
    # Remove any previous tarball
    - rm -fr scilab-*.tar.gz
    # Remove install dir older than 3 days
    - |
      find . -maxdepth 1 -mtime +2 -name "scilab-*" -type d -print0 |\
      while IFS= read -r -d '' i ; do
        chmod -R +w "$i" && rm -rf "$i";
      done
    # Remove TMPDIRs older than 1 day
    - |
      find /tmp -maxdepth 1 -mtime +0 -name "SCI_TMP*" -type d -print0 |\
      while IFS= read -r -d '' i ; do
        [ -w "$i" ] && rm -rf "$i";
      done


# cleanup old builds from runners
cleanup_old_windows_builds:
  stage: prebuild
  tags:
    - x64_windows
    - scilab
  variables:
      GIT_STRATEGY: none
  script:
    # Remove any previous installer
    - del /f /q /s scilab-*.exe |cmd /c ""
    # Remove install dir older than 3 day
    - forfiles -p "." -m "scilab-*" -d -3 -c "cmd /c IF @isdir == TRUE rd /S /Q @path" |cmd /c ""
    # Remove TMPDIRs older than 1 day
    - forfiles -p "%temp%" -m "SCI_TMP*" -d -1 -c "cmd /c IF @isdir == TRUE rd /S /Q @path" |cmd /c ""

# define x86_64-linux-gnu env variables
set_x86_64-linux-gnu_env:
  stage: prebuild
  tags:
    - x86_64-linux-gnu
    - scilab
  variables:
      GIT_STRATEGY: none
  script:
    # get current build machine architecture
    - ARCH=$(cc -dumpmachine)
    # define NOW as Gitlab display ISO 8601 timestamp
    - date +"%s" >timestamp
    - NOW=$(cat timestamp)
    # export useful variables
    - echo ARCH="$ARCH"                              >build.env
    - echo SCI_VERSION_STRING="$SCI_VERSION_STRING" >>build.env
    - echo SCI_VERSION_TIMESTAMP="$NOW"             >>build.env
  artifacts:
    reports:
      dotenv: build.env
# cleanup old builds from runners
set_x64_windows_env:
  stage: prebuild
  tags:
    - x64_windows
    - scilab
  variables:
      GIT_STRATEGY: none
      ARCH:
        value: x64
        description: current build machine architecture
  script:
    - date.exe +"%%s" >timestamp
    - set /p NOW=<timestamp 
    # export
    - echo ARCH="%ARCH%"                              >build.env
    - echo SCI_VERSION_STRING="%SCI_VERSION_STRING%" >>build.env
    - echo SCI_VERSION_TIMESTAMP="%NOW%"             >>build.env
  artifacts:
    reports:
      dotenv: build.env

# manuel clean
clean_linux:
  stage: prebuild
  tags:
    - x86_64-linux-gnu
    - scilab
  variables:
      GIT_CLEAN_FLAGS: -fxd
  script: echo "git clean succeeded"
  when: manual
clean_windows:
  stage: prebuild
  tags:
    - x64_windows
    - scilab
  variables:
      GIT_CLEAN_FLAGS: -fxd
  script: echo "git clean succeeded"
  when: manual

# patch, copy, modify files before building a release
prepare_release_files:
  stage: prebuild
  tags:
    - linux
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "not yet implemented, should patch version numbers against tag"
  artifacts:
    paths:
      - scilab/modules/core/includes/version.h.vc
      - scilab/modules/core/includes/version.h.in

# ensure MR has modified CHANGES.md
.with_changes_modification:
  stage: prebuild
  script:
    - echo CHANGES.md edited
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - changes:
      - scilab/CHANGES.md
