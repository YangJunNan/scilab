# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) Dassault Systemes - 2022 - Clement DAVID
#
#
# This YAML file describe the prebuild stage of the CI. This stage is used to
# cleanup runners and set them ready to build.
#

# create docker images for builders
.create_docker_image:
  stage: .pre
  image: docker:20.10.16

create_docker_image_linux:
  extends: .create_docker_image
  tags: [x86_64-linux-gnu, docker, scilab]
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/linux-builder:latest - <.gitlab-ci/Dockerfile.linux
    - docker push $CI_REGISTRY_IMAGE/linux-builder
  # Docker windows not supported yet
  #  - docker build -t $CI_REGISTRY/$CI_PROJECT_PATH/windows-runner:$CI_COMMIT_REF_SLUG - < .gitlab-ci/Dockerfile.windows
  #  - docker push $CI_REGISTRY/$CI_PROJECT_PATH/windows-runner
  rules:
    - changes:
        - .gitlab-ci/Dockerfile.linux

# cleanup old builds from runners
x86_64-linux-gnu_cleanup_builds:
  stage: prebuild
  tags: [x86_64-linux-gnu, docker, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    - set -e -x
    # Remove any previous tarball
    - rm -fr scilab-*.tar.xz
    # Remove install dir older than 3 days
    - |
      find . -maxdepth 1 -mtime +2 -name "scilab-*" -type d -print0 |\
      while IFS= read -r -d '' i ; do
        chmod -R +w "$i" && rm -rf "$i";
      done
    # Remove TMPDIRs older than 1 day
    - |
      find /tmp -maxdepth 1 -mtime +0 -name "SCI_TMP*" -type d -print0 |\
      while IFS= read -r -d '' i ; do
        [ -w "$i" ] && rm -rf "$i";
      done

# cleanup old builds from runners
x64_windows_cleanup_builds:
  stage: prebuild
  tags: [x64_windows, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    # Remove any previous installer
    - del /f /q /s scilab-*.exe |cmd /c ""
    # Remove install dir older than 3 day
    - forfiles -p "." -m "scilab-*" -d -3 -c "cmd /c IF @isdir == TRUE rd /S /Q @path" |cmd /c ""
    # Remove TMPDIRs older than 1 day
    - forfiles -p "%temp%" -m "SCI_TMP*" -d -1 -c "cmd /c IF @isdir == TRUE rd /S /Q @path" |cmd /c ""

# define x86_64-linux-gnu env variables
.x86_64-linux-gnu_set_env:
  stage: prebuild
  tags: [x86_64-linux-gnu, docker, scilab]
  variables:
    GIT_STRATEGY: none
  script:
    - set -e
    - set -x
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_BRANCH
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    # get current build machine architecture
    - ARCH=$(cc -dumpmachine)
    # define NOW as Gitlab display ISO 8601 timestamp
    - date +"%s" >timestamp
    - NOW=$(cat timestamp)
    # export useful variables
    - echo ARCH=$ARCH                              >build.env
    - echo SCI_VERSION_STRING=$SCI_VERSION_STRING >>build.env
    - echo SCI_VERSION_TIMESTAMP=$NOW             >>build.env
  artifacts:
    reports:
      dotenv: build.env
# build a preview/branched version
x86_64-linux-gnu_set_branch_env:
  extends: .x86_64-linux-gnu_set_env
  variables:
    # use CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    SCI_VERSION_STRING: "scilab-branch-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
# build a nightly version
x86_64-linux-gnu_set_nightly_env:
  extends: .x86_64-linux-gnu_set_env
  variables:
    # use CI_COMMIT_BRANCH
    SCI_VERSION_STRING: "scilab-branch-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
# build a release version
x86_64-linux-gnu_set_release_env:
  extends: .x86_64-linux-gnu_set_env
  variables:
    SCI_VERSION_STRING: "scilab-${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

# define x64 windows env
.x64_windows_set_env:
  stage: prebuild
  tags: [x64_windows, scilab]
  variables:
    GIT_STRATEGY: none
    ARCH: x64
  script:
    - echo on
    - echo %CI_COMMIT_TAG%
    - echo %CI_COMMIT_BRANCH%
    - echo %CI_MERGE_REQUEST_TARGET_BRANCH_NAME%
    - |
      "C:\Program Files\ds_shell\code\bin\ds_shell\date.exe" +"%%s" >timestamp
      set /p NOW=<timestamp
    # export
    - |
      echo ARCH=%ARCH%                              >build.env
      echo SCI_VERSION_STRING=%SCI_VERSION_STRING% >>build.env
      echo SCI_VERSION_TIMESTAMP=%NOW%             >>build.env
  artifacts:
    reports:
      dotenv: build.env
# build a preview/branched version
x64_windows_set_branch_env:
  extends: .x64_windows_set_env
  variables:
    # use CI_MERGE_REQUEST_TARGET_BRANCH_NAME for the name
    SCI_VERSION_STRING: "scilab-branch-${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}-${CI_COMMIT_SHORT_SHA}"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
# build a nightly version
x64_windows_set_nightly_env:
  extends: .x64_windows_set_env
  variables:
    SCI_VERSION_STRING: "scilab-branch-${CI_COMMIT_BRANCH}-${CI_COMMIT_SHORT_SHA}"
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
# build a release version
x64_windows_set_release_env:
  extends: .x64_windows_set_env
  variables:
    SCI_VERSION_STRING: "scilab-${CI_COMMIT_TAG}"
  rules:
    - if: $CI_COMMIT_TAG

# manual clean
.git_clean:
  stage: prebuild
  tags: [scilab]
  variables:
    GIT_CLEAN_FLAGS: -fxd
  script: echo "git clean succeeded"
  when:
    - manual
x86_64-linux-gnu_clean:
  extends: .git_clean
  tags: [x86_64-linux-gnu]
x64_windows_clean:
  extends: .git_clean
  tags: [x64_windows]

# patch, copy, modify files before building a release
prepare_release_files:
  stage: prebuild
  tags: [x86_64-linux-gnu]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - echo "FIXME should patch version numbers against tag"
  artifacts:
    paths:
      - scilab/modules/core/includes/version.h.vc
      - scilab/modules/core/includes/version.h.in

# check MR has modified CHANGES.md
contains_changes_modification:
  stage: prebuild
  tags: [x86_64-linux-gnu]
  variables:
    GIT_STRATEGY: none
    GIT_CLEAN_FLAGS: none
  script:
    - id
    - env
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - changes:
        - scilab/CHANGES.md
  allow_failure: true
