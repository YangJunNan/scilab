# build scilab using a windows runner
.build_windows_x64:
  stage: build
  needs: [cleanup_old_windows_builds]
  tags:
    - windows x64
    - scilab
  variables:
      GIT_CLEAN_FLAGS: none
  script: call .gitlab-ci\bld.bat
  artifacts:
    paths:
      - log*.txt
      - scilab-*.exe
    when: always

# build an intermediate version
build_windows_x64_branch:
  extends: .build_windows_x64
  variables:
      SCI_VERSION_STRING: scilab-branch-$CI_COMMIT_BRANCH
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_PROTECTED

# build a release
build_windows_x64_release:
  extends: .build_windows_x64
  needs:
    - prepare_release_files
  variables:
      SCI_VERSION_STRING: scilab-$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG



# build scilab using a linux runner
.build_linux_x86_64:
  stage: build
  needs: [cleanup_old_linux_builds]
  tags:
    - linux x86_64
    - scilab
  variables:
      GIT_CLEAN_FLAGS: none
  script: bash -x -e .gitlab-ci/build.sh
  artifacts:
    paths:
      - log*.txt
      - scilab-*.tar.gz
    when: always

# build an intermediate version
build_linux_x64_branch:
  extends: .build_linux_x64
  variables:
      SCI_VERSION_STRING: scilab-branch-$CI_COMMIT_BRANCH
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_REF_PROTECTED

# build a release
build_linux_x64_release:
  extends: .build_linux_x64
  needs:
    - prepare_release_files
  variables:
      SCI_VERSION_STRING: scilab-$CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG


# build scilab using the docker image
build_docker:
  stage: build
  image: $CI_REGISTRY/scilab/scilab:builder_linux
  tags:
    - docker
    - scilab
  cache:
    key: prerequirements-linux-x86_64
    policy: pull
  variables:
      GIT_CLEAN_FLAGS: none
      SCI_VERSION_STRING: scilab-branch-$CI_COMMIT_BRANCH
  when: manual
  script: bash -x -e .gitlab-ci/build.sh
  artifacts:
    paths:
      - log*.txt
      - scilab-*.tar.gz
