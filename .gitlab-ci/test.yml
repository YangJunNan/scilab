# Scilab ( http://www.scilab.org/ ) - This file is part of Scilab
# Copyright (C) Dassault Systemes - 2022 - Clement DAVID
#
#
# This YAML file describe the test stage of the CI. Tests run are defined
# per platform and split in good, bad and ugly sets. Special rules named 
# impacted are added for modules modified by Merge Request.  
#


.x64_windows_test:
  stage: test
  tags: [x64_windows, scilab]
  variables:
      # reuse download and install on each test
      GIT_CLEAN_FLAGS: none
  dependencies: []
  needs:
    # build artifacts will be download by the script only if needed
    - job: x64_windows_build_branch
      artifacts: true
      optional: true
    - job: x64_windows_build_nightly
      artifacts: true
      optional: true
    - job: x64_windows_build_release
      artifacts: true
      optional: true
    # get env information used to build scilab
    - job: x64_windows_set_branch_env
      artifacts: true
      optional: true
    - job: x64_windows_set_release_env
      artifacts: true
      optional: true
  script: call .gitlab-ci\test.bat
  artifacts:
    when: always
    paths:
      - $SCI_VERSION_STRING_$ARCH_$TEST.xml
    reports:
      junit: $SCI_VERSION_STRING_$ARCH_$TEST.xml

x64_windows_test_good:
  extends: .x64_windows_test
  rules: &GOOD_RULES
    - if: $CI_COMMIT_REF_PROTECTED
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
  when: manual
  parallel:
    matrix: &GOOD_TEST_ANCHOR
      - TEST:
        - api_scilab
        - arnoldi
        - ast
        - boolean
        - cacsd
        - completion
        - console
        - core
        - coverage
        - data_structures
        - fftw
        - fileio
        - functions
        - history_manager
        - integer
        - parameters
        - polynomials
        - special_functions
        - spreadsheet
        - string
        - webtools
        - xml

x64_windows_test_bad:
  extends: .x64_windows_test
  rules: &BAD_RULES
    - if: $CI_COMMIT_REF_PROTECTED
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
  when: manual
  parallel:
    matrix: &BAD_TEST_ANCHOR
      - TEST:
        - demo_tools
        - development_tools
        - differential_equations
        - dynamic_link
        - elementary_functions
        - external_objects_java
        - graphic_export
        - graphic_objects
        - graphics
        - gui
        - hdf5
        - helptools
        - interpolation
        - io
        - jvm
        - linear_algebra
        - localization
        - m2sci
        - matio
        - mexlib
        - modules_manager
        - optimization
        - output_stream
        - overloading
        - parallel
        - randlib
        - renderer
        - scicos
        - scicos_blocks
        - scinotes
        - signal_processing
        - slint
        - sound
        - sparse
        - statistics
        - tclsci
        - time
        - ui_data
        - umfpack

x64_windows_test_ugly:
  extends: .x64_windows_test
  rules: &UGLY_RULES
    - if: $CI_COMMIT_REF_PROTECTED
      allow_failure: true
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      allow_failure: true
  when: manual
  parallel:
    matrix: &UGLY_TEST_ANCHOR
      - TEST:
        - atoms
        - mpi
        - windows_tools
        - xcos

impacted_x64_windows_test_good:
  extends: .x64_windows_test
  rules: &IMPACTED_RULES
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      changes:
        - scilab/modules/$TEST/**/*
      when: always
  parallel:
    matrix: *GOOD_TEST_ANCHOR

impacted_x64_windows_test_bad:
  extends: .x64_windows_test
  rules: *IMPACTED_RULES
  parallel:
    matrix: *BAD_TEST_ANCHOR

impacted_x64_windows_test_ugly:
  extends: .x64_windows_test
  rules: *IMPACTED_RULES
  parallel:
    matrix: *UGLY_TEST_ANCHOR


.x86_64-linux-gnu_test:
  stage: test
  tags: [x86_64-linux-gnu, docker, scilab]
  variables:
      # reuse download and install on each test
      GIT_CLEAN_FLAGS: none
  dependencies: []
  needs:
    # build artifacts will be download by the script only if needed
    - job: x86_64-linux-gnu_build_branch
      artifacts: true
      optional: true
    - job: x86_64-linux-gnu_build_nightly
      artifacts: true
      optional: true
    - job: x86_64-linux-gnu_build_release
      artifacts: true
      optional: true
    # get env information used to build scilab
    - job: x86_64-linux-gnu_set_branch_env
      artifacts: true
      optional: true
    - job: x86_64-linux-gnu_set_release_env
      artifacts: true
      optional: true
  script: bash -e -x .gitlab-ci/test.sh
  artifacts:
    when: always
    paths:
      - $SCI_VERSION_STRING_$ARCH_$TEST.xml
    reports:
      junit: $SCI_VERSION_STRING_$ARCH_$TEST.xml

x86_64-linux-gnu_test_good:
  extends: .x86_64-linux-gnu_test
  rules: *GOOD_RULES
  when: manual
  parallel:
    matrix: *GOOD_TEST_ANCHOR

x86_64-linux-gnu_test_bad:
  extends: .x86_64-linux-gnu_test
  rules: *BAD_RULES
  when: manual
  parallel:
    matrix: *BAD_TEST_ANCHOR

x86_64-linux-gnu_test_ugly:
  extends: .x86_64-linux-gnu_test
  rules: *UGLY_RULES
  when: manual
  parallel:
    matrix: *UGLY_TEST_ANCHOR

impacted_x86_64-linux-gnu_test_good:
  extends: .x86_64-linux-gnu_test
  rules: *IMPACTED_RULES
  parallel:
    matrix: *GOOD_TEST_ANCHOR

impacted_x86_64-linux-gnu_test_bad:
  extends: .x86_64-linux-gnu_test
  rules: *IMPACTED_RULES
  parallel:
    matrix: *BAD_TEST_ANCHOR

impacted_x86_64-linux-gnu_test_ugly:
  extends: .x86_64-linux-gnu_test
  rules: *IMPACTED_RULES
  parallel:
    matrix: *UGLY_TEST_ANCHOR

